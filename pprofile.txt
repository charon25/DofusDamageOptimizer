Command line: spell_chain.py
Total duration: 187.91s
File: G:\Autres\DofusDamageCalculator\stats.py
File duration: 56.683s (30.16%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|   0.00099206|   0.00049603|  0.00%|from enum import Enum
     2|         1|            0|            0|  0.00%|import json
     3|         1|            0|            0|  0.00%|import os
     4|         1|            0|            0|  0.00%|import re
     5|         1|            0|            0|  0.00%|from typing import Dict
     6|         1|            0|            0|  0.00%|from uuid import uuid1
(call)|         1|   0.00996876|   0.00996876|  0.01%|# <frozen importlib._bootstrap>:1002 _find_and_load
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         3|            0|            0|  0.00%|class Characteristics(str, Enum):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:164 __prepare__
(call)|         2|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
(call)|         1|  0.000997782|  0.000997782|  0.00%|# G:\Autres\DofusDamageCalculator\stats.py:9 Characteristics
(call)|         1|   0.00199437|   0.00199437|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:179 __new__
    10|         1|            0|            0|  0.00%|    STRENGTH = 0
(call)|         1|  0.000997782|  0.000997782|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    11|         1|            0|            0|  0.00%|    INTELLIGENCE = 1
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    12|         1|            0|            0|  0.00%|    LUCK = 2
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    13|         1|            0|            0|  0.00%|    AGILITY = 3
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    14|         1|            0|            0|  0.00%|    NEUTRAL = 4
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    15|         0|            0|            0|  0.00%|
    16|         3|            0|            0|  0.00%|class Damages(str, Enum):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:164 __prepare__
(call)|         2|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
(call)|         1|   0.00199509|   0.00199509|  0.00%|# G:\Autres\DofusDamageCalculator\stats.py:16 Damages
(call)|         1|   0.00299597|   0.00299597|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:179 __new__
    17|         1|            0|            0|  0.00%|    POWER = 9
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    18|         1|            0|            0|  0.00%|    BASIC = 5
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    19|         1|            0|            0|  0.00%|    CRIT = 8
(call)|         1|  0.000969887|  0.000969887|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    20|         1|            0|            0|  0.00%|    EARTH = 0
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    21|         1|            0|            0|  0.00%|    FIRE = 1
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    22|         1|            0|            0|  0.00%|    WATER = 2
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    23|         1|            0|            0|  0.00%|    AIR = 3
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    24|         1|            0|            0|  0.00%|    NEUTRAL = 4
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    25|         1|            0|            0|  0.00%|    SPELL = 6
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    26|         1|            0|            0|  0.00%|    WEAPON = 7
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    27|         1|            0|            0|  0.00%|    WEAPON_POWER = 10
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    28|         1|            0|            0|  0.00%|    RANGE = 12
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    29|         1|    0.0010252|    0.0010252|  0.00%|    MELEE = 13
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    30|         1|            0|            0|  0.00%|    FINAL = 11
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         3|            0|            0|  0.00%|class Stats:
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\stats.py:33 Stats
    34|    172089|      0.33433|  1.94277e-06|  0.18%|    def __init__(self) -> None:
    35|    172088|     0.427134|  2.48207e-06|  0.23%|        self.characteristics: Dict[Characteristics, int] = dict()
    36|    172088|     0.424087|  2.46436e-06|  0.23%|        self.damages: Dict[Characteristics, int] = dict()
    37|    172088|     0.388229|  2.25599e-06|  0.21%|        self.bonus_crit_chance = 0.0
    38|    172088|     0.373031|  2.16767e-06|  0.20%|        self.name = ''
    39|    172088|     0.372808|  2.16638e-06|  0.20%|        self.short_name = ''
    40|         0|            0|            0|  0.00%|
    41|    172088|      1.21554|  7.06347e-06|  0.65%|        self._fill_empty_dicts()
(call)|    172088|      48.5926|   0.00028237| 25.86%|# G:\Autres\DofusDamageCalculator\stats.py:43 _fill_empty_dicts
    42|         0|            0|            0|  0.00%|
    43|    172089|      0.34528|   2.0064e-06|  0.18%|    def _fill_empty_dicts(self):
    44|   1032528|       7.4177|  7.18401e-06|  3.95%|        for characteristic in Characteristics:
(call)|    172088|       0.8362|  4.85914e-06|  0.44%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|   1032528|      4.23294|  4.09959e-06|  2.25%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
    45|    860440|      1.99153|  2.31454e-06|  1.06%|            self.characteristics[characteristic] = 0
    46|         0|            0|            0|  0.00%|
    47|   2581320|      16.9255|  6.55692e-06|  9.01%|        for damage in Damages:
(call)|    172088|     0.820737|  4.76928e-06|  0.44%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|   2581320|      10.4402|  4.04451e-06|  5.56%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
    48|   2409232|      5.58249|  2.31713e-06|  2.97%|            self.damages[damage] = 0
    49|         0|            0|            0|  0.00%|
    50|         1|            0|            0|  0.00%|    def to_dict(self):
    51|         0|            0|            0|  0.00%|        return {
    52|         0|            0|            0|  0.00%|            'characteristics': self.characteristics,
    53|         0|            0|            0|  0.00%|            'damages': self.damages,
    54|         0|            0|            0|  0.00%|            'bonus_crit_chance': self.bonus_crit_chance,
    55|         0|            0|            0|  0.00%|            'name': self.name,
    56|         0|            0|            0|  0.00%|            'short_name': self.short_name
    57|         0|            0|            0|  0.00%|        }
    58|         0|            0|            0|  0.00%|
    59|         1|            0|            0|  0.00%|    def to_compact_string(self, indentation: str = ''):
    60|         0|            0|            0|  0.00%|        output_lines = []
    61|         0|            0|            0|  0.00%|        characteristic_lines = []
    62|         0|            0|            0|  0.00%|        for characteristic in Characteristics:
    63|         0|            0|            0|  0.00%|            if characteristic == Characteristics.NEUTRAL:
    64|         0|            0|            0|  0.00%|                continue
    65|         0|            0|            0|  0.00%|            if self.get_characteristic(characteristic) != 0:
    66|         0|            0|            0|  0.00%|                characteristic_lines.append(f'{indentation * 2}{characteristic.name}: {self.get_characteristic(characteristic)}')
    67|         0|            0|            0|  0.00%|        if characteristic_lines:
    68|         0|            0|            0|  0.00%|            output_lines.append(f'{indentation}-> Characteristics')
    69|         0|            0|            0|  0.00%|            output_lines.extend(characteristic_lines)
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|        damage_lines = []
    72|         0|            0|            0|  0.00%|        for damage in Damages:
    73|         0|            0|            0|  0.00%|            if self.get_damage(damage) != 0:
    74|         0|            0|            0|  0.00%|                damage_lines.append(f'{indentation * 2}{damage.name}: {self.get_damage(damage)}')
    75|         0|            0|            0|  0.00%|        if damage_lines:
    76|         0|            0|            0|  0.00%|            output_lines.append(f'{indentation}-> Damages')
    77|         0|            0|            0|  0.00%|            output_lines.extend(damage_lines)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|        if self.bonus_crit_chance > 0.0:
    80|         0|            0|            0|  0.00%|            output_lines.append(f'{indentation}-> Bonus crit chance: {100 * self.bonus_crit_chance:.0f} %')
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|        return '\n'.join(output_lines) if output_lines else None
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|
    85|         1|            0|            0|  0.00%|    def save_to_file(self, filepath):
    86|         0|            0|            0|  0.00%|        json_valid_data = self.to_dict()
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|        with open(filepath, 'w', encoding='utf-8') as fo:
    89|         0|            0|            0|  0.00%|            json.dump(json_valid_data, fo)
    90|         0|            0|            0|  0.00%|
    91|         0|            0|            0|  0.00%|
    92|     57361|     0.140138|  2.44309e-06|  0.07%|    def __add__(self, other: 'Stats'):
    93|     57360|     0.166724|  2.90663e-06|  0.09%|        if isinstance(other, int):  # Useful when doing stats + sum([]) - No matter the integer, return the stats
    94|         0|            0|            0|  0.00%|            return Stats.from_existing(self)
    95|     57360|      0.12855|   2.2411e-06|  0.07%|        elif not isinstance(other, Stats):
    96|         0|            0|            0|  0.00%|            raise TypeError(f"unsupported operand type(s) for +: 'Stats' and '{type(other)}'.")
    97|         0|            0|            0|  0.00%|
    98|     57360|     0.409052|  7.13131e-06|  0.22%|        result = Stats()
(call)|     57360|      17.2616|  0.000300935|  9.19%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
    99|    344160|      2.52631|   7.3405e-06|  1.34%|        for characteristic in Characteristics:
(call)|     57360|     0.265368|  4.62636e-06|  0.14%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    344160|      1.48327|  4.30984e-06|  0.79%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   100|    286800|     0.759804|  2.64925e-06|  0.40%|            if characteristic != Characteristics.NEUTRAL:
   101|    229440|     0.634304|  2.76457e-06|  0.34%|                result.characteristics[characteristic] = self.characteristics[characteristic] + other.characteristics[characteristic]
   102|         0|            0|            0|  0.00%|
   103|    860400|      5.83365|  6.78016e-06|  3.10%|        for damage in Damages:
(call)|     57360|     0.255038|  4.44626e-06|  0.14%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    860400|       3.4749|  4.03871e-06|  1.85%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   104|    803040|      2.10806|   2.6251e-06|  1.12%|            result.damages[damage] = self.damages[damage] + other.damages[damage]
   105|         0|            0|            0|  0.00%|
   106|     57360|     0.159071|   2.7732e-06|  0.08%|        result.bonus_crit_chance = self.bonus_crit_chance + other.bonus_crit_chance
   107|     57360|     0.115226|  2.00883e-06|  0.06%|        result.name = self.name
   108|         0|            0|            0|  0.00%|
   109|     57360|     0.145574|   2.5379e-06|  0.08%|        return result
   110|         0|            0|            0|  0.00%|
   111|         1|            0|            0|  0.00%|    def __radd__(self, other):
   112|         0|            0|            0|  0.00%|        if other == 0:
   113|         0|            0|            0|  0.00%|            return self
   114|         0|            0|            0|  0.00%|        else:
   115|         0|            0|            0|  0.00%|            return self + other
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|     76481|     0.142045|  1.85726e-06|  0.08%|    def get_characteristic(self, characteristic):
   119|     76480|     0.175775|  2.29831e-06|  0.09%|        if not isinstance(characteristic, Characteristics):
   120|         0|            0|            0|  0.00%|            raise TypeError(f"'{characteristic} is not a valid characteristic.")
   121|         0|            0|            0|  0.00%|
   122|     76480|     0.151581|  1.98197e-06|  0.08%|        return self.characteristics[characteristic]
   123|         0|            0|            0|  0.00%|
   124|         1|            0|            0|  0.00%|    def set_characteristic(self, characteristic, value):
   125|         0|            0|            0|  0.00%|        if not isinstance(characteristic, Characteristics):
   126|         0|            0|            0|  0.00%|            raise TypeError(f"'{characteristic} is not a valid characteristic.")
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|        if characteristic == Characteristics.NEUTRAL:
   129|         0|            0|            0|  0.00%|            raise TypeError('Neutral caracteritics cannot be changed on its own.')
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|        if not isinstance(value, int):
   132|         0|            0|            0|  0.00%|            raise TypeError(f"Value should be an int ('{value}' of type '{type(value)}' given instead).")
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|        self.characteristics[characteristic] = value
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|        if characteristic == Characteristics.STRENGTH:
   137|         0|            0|            0|  0.00%|            self.characteristics[Characteristics.NEUTRAL] = value
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|    497121|     0.866812|  1.74366e-06|  0.46%|    def get_damage(self, damage):
   141|    497120|      1.20127|  2.41646e-06|  0.64%|        if not isinstance(damage, Damages):
   142|         0|            0|            0|  0.00%|            raise TypeError(f"'{damage} is not a valid damage.")
   143|         0|            0|            0|  0.00%|
   144|    497120|      1.14912|  2.31156e-06|  0.61%|        return self.damages[damage]
   145|         0|            0|            0|  0.00%|
   146|         1|            0|            0|  0.00%|    def set_damage(self, damage, value):
   147|         0|            0|            0|  0.00%|        if not isinstance(damage, Damages):
   148|         0|            0|            0|  0.00%|            raise TypeError(f"'{damage}' is not a valid damage.")
   149|         0|            0|            0|  0.00%|
   150|         0|            0|            0|  0.00%|        if not isinstance(value, int):
   151|         0|            0|            0|  0.00%|            raise TypeError(f"Value should be an int ('{value}' of type '{type(value)}' given instead).")
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|        self.damages[damage] = value
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         1|            0|            0|  0.00%|    def get_bonus_crit_chance(self):
   157|         0|            0|            0|  0.00%|        return self.bonus_crit_chance
   158|         0|            0|            0|  0.00%|
   159|         1|            0|            0|  0.00%|    def set_bonus_crit_chance(self, bonus_crit_chance):
   160|         0|            0|            0|  0.00%|        if not (isinstance(bonus_crit_chance, float) or isinstance(bonus_crit_chance, int)):
   161|         0|            0|            0|  0.00%|            raise TypeError(f"Bonus crit chance is not a float ('{bonus_crit_chance}' of type '{type(bonus_crit_chance)}' given instead).")
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|        if not (0.0 <= bonus_crit_chance <= 1.0):
   164|         0|            0|            0|  0.00%|            raise ValueError(f"Bonus crit chance should be between 0 and 1 inclusive ('{bonus_crit_chance}' given instead).")
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|        self.bonus_crit_chance = float(bonus_crit_chance)
   167|         0|            0|            0|  0.00%|
   168|         1|            0|            0|  0.00%|    def get_name(self):
   169|         0|            0|            0|  0.00%|        return self.name
   170|         0|            0|            0|  0.00%|
   171|         1|            0|            0|  0.00%|    def set_name(self, name):
   172|         0|            0|            0|  0.00%|        if name == '':
   173|         0|            0|            0|  0.00%|            name = 'Unnamed stats'
   174|         0|            0|            0|  0.00%|
   175|         0|            0|            0|  0.00%|        self.name = str(name)
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|
   178|         1|            0|            0|  0.00%|    def get_short_name(self):
   179|         0|            0|            0|  0.00%|        return self.short_name
   180|         0|            0|            0|  0.00%|
   181|         1|            0|            0|  0.00%|    def get_safe_name(self):
   182|         0|            0|            0|  0.00%|        return re.sub(r'\W', '_', self.short_name)
   183|         0|            0|            0|  0.00%|
   184|         1|            0|            0|  0.00%|    def set_short_name(self, short_name):
   185|         0|            0|            0|  0.00%|        if short_name == '':
   186|         0|            0|            0|  0.00%|            short_name = str(uuid1())
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|        self.short_name = str(short_name)
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|
   191|         1|            0|            0|  0.00%|    def copy(self):
   192|         0|            0|            0|  0.00%|        return Stats.from_existing(self)
   193|         0|            0|            0|  0.00%|
   194|     19121|    0.0349078|  1.82563e-06|  0.02%|    @classmethod
   195|         1|            0|            0|  0.00%|    def from_existing(cls, other_stats: 'Stats'):
   196|         0|            0|            0|  0.00%|        # This function does not use the getters and setters to minimize the execution time
   197|     19120|     0.135765|   7.1007e-06|  0.07%|        stats = Stats()
(call)|     19120|      5.71793|  0.000299055|  3.04%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
   198|         0|            0|            0|  0.00%|
   199|    114720|     0.855716|  7.45917e-06|  0.46%|        for characteristic in Characteristics:
(call)|     19120|      0.11309|  5.91473e-06|  0.06%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    114720|     0.482688|  4.20753e-06|  0.26%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   200|     95600|     0.235412|  2.46247e-06|  0.13%|            stats.characteristics[characteristic] = other_stats.characteristics[characteristic]
   201|         0|            0|            0|  0.00%|
   202|    286800|      1.94239|  6.77263e-06|  1.03%|        for damage in Damages:
(call)|     19120|    0.0928671|  4.85707e-06|  0.05%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    286800|      1.14846|  4.00441e-06|  0.61%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   203|    267680|     0.672279|   2.5115e-06|  0.36%|            stats.damages[damage] = other_stats.damages[damage]
   204|         0|            0|            0|  0.00%|
   205|     19120|    0.0599582|  3.13589e-06|  0.03%|        stats.bonus_crit_chance = other_stats.bonus_crit_chance
   206|     19120|    0.0420184|  2.19762e-06|  0.02%|        stats.name = other_stats.name
   207|     19120|    0.0440133|  2.30195e-06|  0.02%|        stats.short_name = other_stats.short_name
   208|         0|            0|            0|  0.00%|
   209|     19120|    0.0477812|  2.49902e-06|  0.03%|        return stats
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         1|            0|            0|  0.00%|    @classmethod
   213|         1|            0|            0|  0.00%|    def check_json_validity(cls, json_data):
   214|         0|            0|            0|  0.00%|        for key in ('characteristics', 'damages', 'name', 'bonus_crit_chance', 'short_name'):
   215|         0|            0|            0|  0.00%|            if not key in json_data:
   216|         0|            0|            0|  0.00%|                raise KeyError(f"JSON string does not contain a '{key}' key.")
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|        for characteristic in Characteristics:
   219|         0|            0|            0|  0.00%|            if not characteristic in json_data['characteristics']:
   220|         0|            0|            0|  0.00%|                raise KeyError(f"JSON string 'characteristics' array does not contains '{characteristic}'.")
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|        if json_data['characteristics'][Characteristics.NEUTRAL] != json_data['characteristics'][Characteristics.STRENGTH]:
   223|         0|            0|            0|  0.00%|            raise ValueError("Neutral and Strength characteristics have to be equal.")
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|        for damage in Damages:
   226|         0|            0|            0|  0.00%|            if not damage in json_data['damages']:
   227|         0|            0|            0|  0.00%|                raise KeyError(f"JSON string 'damages' array does not contains '{damage}'.")
   228|         0|            0|            0|  0.00%|
   229|         1|            0|            0|  0.00%|    @classmethod
   230|         1|            0|            0|  0.00%|    def from_json_string(cls, json_string):
   231|         0|            0|            0|  0.00%|        json_data = json.loads(json_string)
   232|         0|            0|            0|  0.00%|        Stats.check_json_validity(json_data)
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|        stats = Stats()
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|        for characteristic in Characteristics:
   237|         0|            0|            0|  0.00%|            if characteristic != Characteristics.NEUTRAL:
   238|         0|            0|            0|  0.00%|                stats.set_characteristic(characteristic, json_data['characteristics'][characteristic])
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|        for damage in Damages:
   241|         0|            0|            0|  0.00%|            stats.set_damage(damage, json_data['damages'][damage])
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|        stats.set_bonus_crit_chance(json_data['bonus_crit_chance'])
   244|         0|            0|            0|  0.00%|        stats.set_name(json_data['name'])
   245|         0|            0|            0|  0.00%|        stats.set_short_name(json_data['short_name'])
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|        return stats
   248|         0|            0|            0|  0.00%|
   249|         1|            0|            0|  0.00%|    @classmethod
   250|         1|            0|            0|  0.00%|    def from_file(cls, filepath):
   251|         0|            0|            0|  0.00%|        if not (os.path.isfile(filepath) and os.access(filepath, os.R_OK)):
   252|         0|            0|            0|  0.00%|            raise FileNotFoundError(f"Cannot create stats from file {filepath}: file not found or innaccessible.")
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|        with open(filepath, 'r', encoding='utf-8') as fi:
   255|         0|            0|            0|  0.00%|            json_string = fi.read()
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|        return Stats.from_json_string(json_string)
   258|         0|            0|            0|  0.00%|
   259|         1|            0|            0|  0.00%|    @classmethod
   260|         1|            0|            0|  0.00%|    def from_dict(cls, data):
   261|         0|            0|            0|  0.00%|        return Stats.from_json_string(json.dumps(data))
File: C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py
File duration: 40.581s (21.60%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import sys
     2|         0|            0|            0|  0.00%|from types import MappingProxyType, DynamicClassAttribute
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|__all__ = [
     6|         0|            0|            0|  0.00%|        'EnumMeta',
     7|         0|            0|            0|  0.00%|        'Enum', 'IntEnum', 'Flag', 'IntFlag',
     8|         0|            0|            0|  0.00%|        'auto', 'unique',
     9|         0|            0|            0|  0.00%|        ]
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|        22|            0|            0|  0.00%|def _is_descriptor(obj):
    13|         0|            0|            0|  0.00%|    """
    14|         0|            0|            0|  0.00%|    Returns True if obj is a descriptor, False otherwise.
    15|         0|            0|            0|  0.00%|    """
    16|        22|            0|            0|  0.00%|    return (
    17|        44|            0|            0|  0.00%|            hasattr(obj, '__get__') or
    18|        22|            0|            0|  0.00%|            hasattr(obj, '__set__') or
    19|        22|            0|            0|  0.00%|            hasattr(obj, '__delete__')
    20|         0|            0|            0|  0.00%|            )
    21|         0|            0|            0|  0.00%|
    22|        34|            0|            0|  0.00%|def _is_dunder(name):
    23|         0|            0|            0|  0.00%|    """
    24|         0|            0|            0|  0.00%|    Returns True if a __dunder__ name, False otherwise.
    25|         0|            0|            0|  0.00%|    """
    26|        34|  0.000997782|  2.93465e-05|  0.00%|    return (
    27|        75|            0|            0|  0.00%|            len(name) > 4 and
    28|        29|            0|            0|  0.00%|            name[:2] == name[-2:] == '__' and
    29|        12|            0|            0|  0.00%|            name[2] != '_' and
    30|        12|            0|            0|  0.00%|            name[-3] != '_'
    31|         0|            0|            0|  0.00%|            )
    32|         0|            0|            0|  0.00%|
    33|        34|            0|            0|  0.00%|def _is_sunder(name):
    34|         0|            0|            0|  0.00%|    """
    35|         0|            0|            0|  0.00%|    Returns True if a _sunder_ name, False otherwise.
    36|         0|            0|            0|  0.00%|    """
    37|        34|            0|            0|  0.00%|    return (
    38|        80|            0|            0|  0.00%|            len(name) > 2 and
    39|        34|            0|            0|  0.00%|            name[0] == name[-1] == '_' and
    40|        12|            0|            0|  0.00%|            name[1:2] != '_' and
    41|         3|            0|            0|  0.00%|            name[-2:-1] != '_'
    42|         0|            0|            0|  0.00%|            )
    43|         0|            0|            0|  0.00%|
    44|        34|            0|            0|  0.00%|def _is_private(cls_name, name):
    45|         0|            0|            0|  0.00%|    # do not use `re` as `re` imports `enum`
    46|        34|            0|            0|  0.00%|    pattern = '_%s__' % (cls_name, )
    47|        29|            0|            0|  0.00%|    if (
    48|        34|            0|            0|  0.00%|            len(name) >= 5
    49|        29|            0|            0|  0.00%|            and name.startswith(pattern)
    50|         0|            0|            0|  0.00%|            and name[len(pattern)] != '_'
    51|         0|            0|            0|  0.00%|            and (name[-1] != '_' or name[-2] != '_')
    52|         0|            0|            0|  0.00%|        ):
    53|         0|            0|            0|  0.00%|        return True
    54|         0|            0|            0|  0.00%|    else:
    55|        34|            0|            0|  0.00%|        return False
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|def _make_class_unpicklable(cls):
    58|         0|            0|            0|  0.00%|    """
    59|         0|            0|            0|  0.00%|    Make the given class un-picklable.
    60|         0|            0|            0|  0.00%|    """
    61|         0|            0|            0|  0.00%|    def _break_on_call_reduce(self, proto):
    62|         0|            0|            0|  0.00%|        raise TypeError('%r cannot be pickled' % self)
    63|         0|            0|            0|  0.00%|    cls.__reduce_ex__ = _break_on_call_reduce
    64|         0|            0|            0|  0.00%|    cls.__module__ = '<unknown>'
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|_auto_null = object()
    67|         0|            0|            0|  0.00%|class auto:
    68|         0|            0|            0|  0.00%|    """
    69|         0|            0|            0|  0.00%|    Instances are replaced with an appropriate value in Enum class suites.
    70|         0|            0|            0|  0.00%|    """
    71|         0|            0|            0|  0.00%|    value = _auto_null
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|class _EnumDict(dict):
    75|         0|            0|            0|  0.00%|    """
    76|         0|            0|            0|  0.00%|    Track enum member order and ensure member names are not reused.
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    EnumMeta will use the names found in self._member_names as the
    79|         0|            0|            0|  0.00%|    enumeration member names.
    80|         0|            0|            0|  0.00%|    """
    81|         3|            0|            0|  0.00%|    def __init__(self):
    82|         3|            0|            0|  0.00%|        super().__init__()
    83|         3|            0|            0|  0.00%|        self._member_names = []
    84|         3|            0|            0|  0.00%|        self._last_values = []
    85|         3|            0|            0|  0.00%|        self._ignore = []
    86|         3|            0|            0|  0.00%|        self._auto_called = False
    87|         0|            0|            0|  0.00%|
    88|        34|            0|            0|  0.00%|    def __setitem__(self, key, value):
    89|         0|            0|            0|  0.00%|        """
    90|         0|            0|            0|  0.00%|        Changes anything not dundered or not a descriptor.
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|        If an enum member name is used twice, an error is raised; duplicate
    93|         0|            0|            0|  0.00%|        values are not checked for.
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|        Single underscore (sunder) names are reserved.
    96|         0|            0|            0|  0.00%|        """
    97|        34|            0|            0|  0.00%|        if _is_private(self._cls_name, key):
(call)|        34|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:44 _is_private
    98|         0|            0|            0|  0.00%|            import warnings
    99|         0|            0|            0|  0.00%|            warnings.warn(
   100|         0|            0|            0|  0.00%|                    "private variables, such as %r, will be normal attributes in 3.10"
   101|         0|            0|            0|  0.00%|                        % (key, ),
   102|         0|            0|            0|  0.00%|                    DeprecationWarning,
   103|         0|            0|            0|  0.00%|                    stacklevel=2,
   104|         0|            0|            0|  0.00%|                    )
   105|        34|            0|            0|  0.00%|        if _is_sunder(key):
(call)|        34|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:33 _is_sunder
   106|         3|            0|            0|  0.00%|            if key not in (
   107|         0|            0|            0|  0.00%|                    '_order_', '_create_pseudo_member_',
   108|         0|            0|            0|  0.00%|                    '_generate_next_value_', '_missing_', '_ignore_',
   109|         0|            0|            0|  0.00%|                    ):
   110|         0|            0|            0|  0.00%|                raise ValueError('_names_ are reserved for future Enum use')
   111|         3|            0|            0|  0.00%|            if key == '_generate_next_value_':
   112|         0|            0|            0|  0.00%|                # check if members already defined as auto()
   113|         3|            0|            0|  0.00%|                if self._auto_called:
   114|         0|            0|            0|  0.00%|                    raise TypeError("_generate_next_value_ must be defined before members")
   115|         3|            0|            0|  0.00%|                setattr(self, '_generate_next_value', value)
   116|         0|            0|            0|  0.00%|            elif key == '_ignore_':
   117|         0|            0|            0|  0.00%|                if isinstance(value, str):
   118|         0|            0|            0|  0.00%|                    value = value.replace(',',' ').split()
   119|         0|            0|            0|  0.00%|                else:
   120|         0|            0|            0|  0.00%|                    value = list(value)
   121|         0|            0|            0|  0.00%|                self._ignore = value
   122|         0|            0|            0|  0.00%|                already = set(value) & set(self._member_names)
   123|         0|            0|            0|  0.00%|                if already:
   124|         0|            0|            0|  0.00%|                    raise ValueError(
   125|         0|            0|            0|  0.00%|                            '_ignore_ cannot specify already set names: %r'
   126|         0|            0|            0|  0.00%|                            % (already, )
   127|         0|            0|            0|  0.00%|                            )
   128|        31|            0|            0|  0.00%|        elif _is_dunder(key):
(call)|        31|  0.000997782|  3.21865e-05|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:22 _is_dunder
   129|         9|            0|            0|  0.00%|            if key == '__order__':
   130|         0|            0|            0|  0.00%|                key = '_order_'
   131|        22|            0|            0|  0.00%|        elif key in self._member_names:
   132|         0|            0|            0|  0.00%|            # descriptor overwriting an enum?
   133|         0|            0|            0|  0.00%|            raise TypeError('Attempted to reuse key: %r' % key)
   134|        22|  0.000969887|  4.40858e-05|  0.00%|        elif key in self._ignore:
   135|         0|            0|            0|  0.00%|            pass
   136|        22|            0|            0|  0.00%|        elif not _is_descriptor(value):
(call)|        22|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:12 _is_descriptor
   137|        22|            0|            0|  0.00%|            if key in self:
   138|         0|            0|            0|  0.00%|                # enum overwriting a descriptor?
   139|         0|            0|            0|  0.00%|                raise TypeError('%r already defined as: %r' % (key, self[key]))
   140|        22|            0|            0|  0.00%|            if isinstance(value, auto):
   141|         0|            0|            0|  0.00%|                if value.value == _auto_null:
   142|         0|            0|            0|  0.00%|                    value.value = self._generate_next_value(
   143|         0|            0|            0|  0.00%|                            key,
   144|         0|            0|            0|  0.00%|                            1,
   145|         0|            0|            0|  0.00%|                            len(self._member_names),
   146|         0|            0|            0|  0.00%|                            self._last_values[:],
   147|         0|            0|            0|  0.00%|                            )
   148|         0|            0|            0|  0.00%|                    self._auto_called = True
   149|         0|            0|            0|  0.00%|                value = value.value
   150|        22|            0|            0|  0.00%|            self._member_names.append(key)
   151|        22|            0|            0|  0.00%|            self._last_values.append(value)
   152|        34|            0|            0|  0.00%|        super().__setitem__(key, value)
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|# Dummy value for Enum as EnumMeta explicitly checks for it, but of course
   156|         0|            0|            0|  0.00%|# until EnumMeta finishes running the first time the Enum class doesn't exist.
   157|         0|            0|            0|  0.00%|# This is also why there are checks in EnumMeta like `if Enum is not None`
   158|         0|            0|            0|  0.00%|Enum = None
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|class EnumMeta(type):
   161|         0|            0|            0|  0.00%|    """
   162|         0|            0|            0|  0.00%|    Metaclass for Enum
   163|         0|            0|            0|  0.00%|    """
   164|         3|            0|            0|  0.00%|    @classmethod
   165|         0|            0|            0|  0.00%|    def __prepare__(metacls, cls, bases, **kwds):
   166|         0|            0|            0|  0.00%|        # check that previous enum members do not exist
   167|         3|            0|            0|  0.00%|        metacls._check_for_existing_members(cls, bases)
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:561 _check_for_existing_members
   168|         0|            0|            0|  0.00%|        # create the namespace dict
   169|         3|            0|            0|  0.00%|        enum_dict = _EnumDict()
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:81 __init__
   170|         3|            0|            0|  0.00%|        enum_dict._cls_name = cls
   171|         0|            0|            0|  0.00%|        # inherit previous flags and _generate_next_value_ function
   172|         3|            0|            0|  0.00%|        member_type, first_enum = metacls._get_mixins_(cls, bases)
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:571 _get_mixins_
   173|         3|            0|            0|  0.00%|        if first_enum is not None:
   174|         6|            0|            0|  0.00%|            enum_dict['_generate_next_value_'] = getattr(
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
   175|         3|            0|            0|  0.00%|                    first_enum, '_generate_next_value_', None,
   176|         0|            0|            0|  0.00%|                    )
   177|         3|            0|            0|  0.00%|        return enum_dict
   178|         0|            0|            0|  0.00%|
   179|         3|            0|            0|  0.00%|    def __new__(metacls, cls, bases, classdict, **kwds):
   180|         0|            0|            0|  0.00%|        # an Enum class is final once enumeration items have been defined; it
   181|         0|            0|            0|  0.00%|        # cannot be mixed with other types (int, float, etc.) if it has an
   182|         0|            0|            0|  0.00%|        # inherited __new__ unless a new __new__ is defined (or the resulting
   183|         0|            0|            0|  0.00%|        # class will fail).
   184|         0|            0|            0|  0.00%|        #
   185|         0|            0|            0|  0.00%|        # remove any keys listed in _ignore_
   186|         3|            0|            0|  0.00%|        classdict.setdefault('_ignore_', []).append('_ignore_')
   187|         3|            0|            0|  0.00%|        ignore = classdict['_ignore_']
   188|         6|            0|            0|  0.00%|        for key in ignore:
   189|         3|   0.00102472|  0.000341574|  0.00%|            classdict.pop(key, None)
   190|         3|            0|            0|  0.00%|        member_type, first_enum = metacls._get_mixins_(cls, bases)
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:571 _get_mixins_
   191|         6|            0|            0|  0.00%|        __new__, save_new, use_args = metacls._find_new_(
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:618 _find_new_
   192|         3|            0|            0|  0.00%|                classdict, member_type, first_enum,
   193|         0|            0|            0|  0.00%|                )
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|        # save enum items into separate mapping so they don't get baked into
   196|         0|            0|            0|  0.00%|        # the new class
   197|        31|            0|            0|  0.00%|        enum_members = {k: classdict[k] for k in classdict._member_names}
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:197 <dictcomp>
   198|        25|            0|            0|  0.00%|        for name in classdict._member_names:
   199|        22|            0|            0|  0.00%|            del classdict[name]
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|        # adjust the sunders
   202|         3|            0|            0|  0.00%|        _order_ = classdict.pop('_order_', None)
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|        # check for illegal enum names (any others?)
   205|         3|            0|            0|  0.00%|        invalid_names = set(enum_members) & {'mro', ''}
   206|         3|            0|            0|  0.00%|        if invalid_names:
   207|         0|            0|            0|  0.00%|            raise ValueError('Invalid enum member name: {0}'.format(
   208|         0|            0|            0|  0.00%|                ','.join(invalid_names)))
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|        # create a default docstring if one has not been provided
   211|         3|            0|            0|  0.00%|        if '__doc__' not in classdict:
   212|         3|            0|            0|  0.00%|            classdict['__doc__'] = 'An enumeration.'
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:88 __setitem__
   213|         0|            0|            0|  0.00%|
   214|         3|            0|            0|  0.00%|        enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)
   215|         3|            0|            0|  0.00%|        enum_class._member_names_ = []               # names in definition order
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   216|         3|            0|            0|  0.00%|        enum_class._member_map_ = {}                 # name->value map
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   217|         3|            0|            0|  0.00%|        enum_class._member_type_ = member_type
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|        # save DynamicClassAttribute attributes from super classes so we know
   220|         0|            0|            0|  0.00%|        # if we can take the shortcut of storing members in the class dict
   221|        23|            0|            0|  0.00%|        dynamic_attributes = {
(call)|         3|    0.0019958|  0.000665267|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:221 <setcomp>
   222|         9|            0|            0|  0.00%|                k for c in enum_class.mro()
   223|       301|    0.0019958|  6.63057e-06|  0.00%|                for k, v in c.__dict__.items()
   224|       290|            0|            0|  0.00%|                if isinstance(v, DynamicClassAttribute)
   225|         0|            0|            0|  0.00%|                }
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|        # Reverse value->name map for hashable values.
   228|         3|            0|            0|  0.00%|        enum_class._value2member_map_ = {}
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|        # If a custom type is mixed into the Enum, and it does not know how
   231|         0|            0|            0|  0.00%|        # to pickle itself, pickle.dumps will succeed but pickle.loads will
   232|         0|            0|            0|  0.00%|        # fail.  Rather than have the error show up later and possibly far
   233|         0|            0|            0|  0.00%|        # from the source, sabotage the pickle protocol for this class so
   234|         0|            0|            0|  0.00%|        # that pickle.dumps also fails.
   235|         0|            0|            0|  0.00%|        #
   236|         0|            0|            0|  0.00%|        # However, if the new class implements its own __reduce_ex__, do not
   237|         0|            0|            0|  0.00%|        # sabotage -- it's on them to make sure it works correctly.  We use
   238|         0|            0|            0|  0.00%|        # __reduce_ex__ instead of any of the others as it is preferred by
   239|         0|            0|            0|  0.00%|        # pickle over __reduce__, and it handles all pickle protocols.
   240|         3|            0|            0|  0.00%|        if '__reduce_ex__' not in classdict:
   241|         3|            0|            0|  0.00%|            if member_type is not object:
   242|         2|            0|            0|  0.00%|                methods = ('__getnewargs_ex__', '__getnewargs__',
   243|         0|            0|            0|  0.00%|                        '__reduce_ex__', '__reduce__')
   244|        12|            0|            0|  0.00%|                if not any(m in member_type.__dict__ for m in methods):
(call)|         6|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:244 <genexpr>
   245|         0|            0|            0|  0.00%|                    if '__new__' in classdict:
   246|         0|            0|            0|  0.00%|                        # too late, sabotage
   247|         0|            0|            0|  0.00%|                        _make_class_unpicklable(enum_class)
   248|         0|            0|            0|  0.00%|                    else:
   249|         0|            0|            0|  0.00%|                        # final attempt to verify that pickling would work:
   250|         0|            0|            0|  0.00%|                        # travel mro until __new__ is found, checking for
   251|         0|            0|            0|  0.00%|                        # __reduce__ and friends along the way -- if any of them
   252|         0|            0|            0|  0.00%|                        # are found before/when __new__ is found, pickling should
   253|         0|            0|            0|  0.00%|                        # work
   254|         0|            0|            0|  0.00%|                        sabotage = None
   255|         0|            0|            0|  0.00%|                        for chain in bases:
   256|         0|            0|            0|  0.00%|                            for base in chain.__mro__:
   257|         0|            0|            0|  0.00%|                                if base is object:
   258|         0|            0|            0|  0.00%|                                    continue
   259|         0|            0|            0|  0.00%|                                elif any(m in base.__dict__ for m in methods):
   260|         0|            0|            0|  0.00%|                                    # found one, we're good
   261|         0|            0|            0|  0.00%|                                    sabotage = False
   262|         0|            0|            0|  0.00%|                                    break
   263|         0|            0|            0|  0.00%|                                elif '__new__' in base.__dict__:
   264|         0|            0|            0|  0.00%|                                    # not good
   265|         0|            0|            0|  0.00%|                                    sabotage = True
   266|         0|            0|            0|  0.00%|                                    break
   267|         0|            0|            0|  0.00%|                            if sabotage is not None:
   268|         0|            0|            0|  0.00%|                                break
   269|         0|            0|            0|  0.00%|                        if sabotage:
   270|         0|            0|            0|  0.00%|                            _make_class_unpicklable(enum_class)
   271|         0|            0|            0|  0.00%|        # instantiate them, checking for duplicates as we go
   272|         0|            0|            0|  0.00%|        # we instantiate first instead of checking for duplicates first in case
   273|         0|            0|            0|  0.00%|        # a custom __new__ is doing something funky with the values -- such as
   274|         0|            0|            0|  0.00%|        # auto-numbering ;)
   275|        25|            0|            0|  0.00%|        for member_name in classdict._member_names:
   276|        22|            0|            0|  0.00%|            value = enum_members[member_name]
   277|        22|            0|            0|  0.00%|            if not isinstance(value, tuple):
   278|        22|            0|            0|  0.00%|                args = (value, )
   279|         0|            0|            0|  0.00%|            else:
   280|         0|            0|            0|  0.00%|                args = value
   281|        22|            0|            0|  0.00%|            if member_type is tuple:   # special case for tuple enums
   282|         0|            0|            0|  0.00%|                args = (args, )     # wrap it one more time
   283|        22|            0|            0|  0.00%|            if not use_args:
   284|         3|            0|            0|  0.00%|                enum_member = __new__(enum_class)
   285|         3|            0|            0|  0.00%|                if not hasattr(enum_member, '_value_'):
   286|         3|            0|            0|  0.00%|                    enum_member._value_ = value
   287|         0|            0|            0|  0.00%|            else:
   288|        19|            0|            0|  0.00%|                enum_member = __new__(enum_class, *args)
   289|        19|            0|            0|  0.00%|                if not hasattr(enum_member, '_value_'):
   290|        19|  0.000997305|  5.24897e-05|  0.00%|                    if member_type is object:
   291|         0|            0|            0|  0.00%|                        enum_member._value_ = value
   292|         0|            0|            0|  0.00%|                    else:
   293|        19|            0|            0|  0.00%|                        enum_member._value_ = member_type(*args)
   294|        22|            0|            0|  0.00%|            value = enum_member._value_
   295|        22|            0|            0|  0.00%|            enum_member._name_ = member_name
   296|        22|  0.000996113|  4.52779e-05|  0.00%|            enum_member.__objclass__ = enum_class
   297|        22|            0|            0|  0.00%|            enum_member.__init__(*args)
   298|         0|            0|            0|  0.00%|            # If another member with the same value was already defined, the
   299|         0|            0|            0|  0.00%|            # new member becomes an alias to the existing one.
   300|       126|  0.000997305|  7.91512e-06|  0.00%|            for name, canonical_member in enum_class._member_map_.items():
   301|       104|            0|            0|  0.00%|                if canonical_member._value_ == enum_member._value_:
   302|         0|            0|            0|  0.00%|                    enum_member = canonical_member
   303|         0|            0|            0|  0.00%|                    break
   304|         0|            0|            0|  0.00%|            else:
   305|         0|            0|            0|  0.00%|                # Aliases don't appear in member names (only in __members__).
   306|        22|   0.00100112|  4.55054e-05|  0.00%|                enum_class._member_names_.append(member_name)
   307|         0|            0|            0|  0.00%|            # performance boost for any member that would not shadow
   308|         0|            0|            0|  0.00%|            # a DynamicClassAttribute
   309|        22|            0|            0|  0.00%|            if member_name not in dynamic_attributes:
   310|        22|            0|            0|  0.00%|                setattr(enum_class, member_name, enum_member)
(call)|        22|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   311|         0|            0|            0|  0.00%|            # now add to _member_map_
   312|        22|            0|            0|  0.00%|            enum_class._member_map_[member_name] = enum_member
   313|        22|            0|            0|  0.00%|            try:
   314|         0|            0|            0|  0.00%|                # This may fail if value is not hashable. We can't add the value
   315|         0|            0|            0|  0.00%|                # to the map, and by-value lookups for this value will be
   316|         0|            0|            0|  0.00%|                # linear.
   317|        22|            0|            0|  0.00%|                enum_class._value2member_map_[value] = enum_member
   318|         0|            0|            0|  0.00%|            except TypeError:
   319|         0|            0|            0|  0.00%|                pass
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|        # double check that repr and friends are not the mixin's or various
   322|         0|            0|            0|  0.00%|        # things break (such as pickle)
   323|         0|            0|            0|  0.00%|        # however, if the method is defined in the Enum itself, don't replace
   324|         0|            0|            0|  0.00%|        # it
   325|        15|            0|            0|  0.00%|        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
   326|        12|            0|            0|  0.00%|            if name in classdict:
   327|         0|            0|            0|  0.00%|                continue
   328|        12|            0|            0|  0.00%|            class_method = getattr(enum_class, name)
   329|        12|            0|            0|  0.00%|            obj_method = getattr(member_type, name, None)
   330|        12|            0|            0|  0.00%|            enum_method = getattr(first_enum, name, None)
   331|        12|            0|            0|  0.00%|            if obj_method is not None and obj_method is class_method:
   332|         6|            0|            0|  0.00%|                setattr(enum_class, name, enum_method)
(call)|         6|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|        # replace any other __new__ with our own (as long as Enum is not None,
   335|         0|            0|            0|  0.00%|        # anyway) -- again, this is to support pickle
   336|         3|            0|            0|  0.00%|        if Enum is not None:
   337|         0|            0|            0|  0.00%|            # if the user defined their own __new__, save it before it gets
   338|         0|            0|            0|  0.00%|            # clobbered in case they subclass later
   339|         3|            0|            0|  0.00%|            if save_new:
   340|         0|            0|            0|  0.00%|                enum_class.__new_member__ = __new__
   341|         3|            0|            0|  0.00%|            enum_class.__new__ = Enum.__new__
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:462 __setattr__
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|        # py3 support for definition order (helps keep py2/py3 code in sync)
   344|         3|            0|            0|  0.00%|        if _order_ is not None:
   345|         0|            0|            0|  0.00%|            if isinstance(_order_, str):
   346|         0|            0|            0|  0.00%|                _order_ = _order_.replace(',', ' ').split()
   347|         0|            0|            0|  0.00%|            if _order_ != enum_class._member_names_:
   348|         0|            0|            0|  0.00%|                raise TypeError('member order does not match _order_')
   349|         0|            0|            0|  0.00%|
   350|         3|            0|            0|  0.00%|        return enum_class
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|    def __bool__(self):
   353|         0|            0|            0|  0.00%|        """
   354|         0|            0|            0|  0.00%|        classes/types should always be True.
   355|         0|            0|            0|  0.00%|        """
   356|         0|            0|            0|  0.00%|        return True
   357|         0|            0|            0|  0.00%|
   358|    458933|     0.833565|  1.81631e-06|  0.44%|    def __call__(cls, value, names=None, *, module=None, qualname=None, type=None, start=1):
   359|         0|            0|            0|  0.00%|        """
   360|         0|            0|            0|  0.00%|        Either returns an existing member, or creates a new enum class.
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|        This method is used both when an enum class is given a value to match
   363|         0|            0|            0|  0.00%|        to an enumeration member (i.e. Color(3)) and for the functional API
   364|         0|            0|            0|  0.00%|        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|        When used for the functional API:
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|        `value` will be the name of the new class.
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|        `names` should be either a string of white-space/comma delimited names
   371|         0|            0|            0|  0.00%|        (values will start at `start`), or an iterator/mapping of name, value pairs.
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|        `module` should be set to the module this class is being created in;
   374|         0|            0|            0|  0.00%|        if it is not set, an attempt to find that module will be made, but if
   375|         0|            0|            0|  0.00%|        it fails the class will not be picklable.
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|        `qualname` should be set to the actual location this class can be found
   378|         0|            0|            0|  0.00%|        at in its module; by default it is set to the global scope.  If this is
   379|         0|            0|            0|  0.00%|        not correct, unpickling will fail in some circumstances.
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|        `type`, if set, will be mixed in as the first base class.
   382|         0|            0|            0|  0.00%|        """
   383|    458933|      1.06035|  2.31046e-06|  0.56%|        if names is None:  # simple value lookup
   384|    458933|      3.41924|  7.45042e-06|  1.82%|            return cls.__new__(cls, value)
(call)|    458933|      4.66495|  1.01648e-05|  2.48%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:670 __new__
   385|         0|            0|            0|  0.00%|        # otherwise, functional API: we're creating a new Enum type
   386|         0|            0|            0|  0.00%|        return cls._create_(
   387|         0|            0|            0|  0.00%|                value,
   388|         0|            0|            0|  0.00%|                names,
   389|         0|            0|            0|  0.00%|                module=module,
   390|         0|            0|            0|  0.00%|                qualname=qualname,
   391|         0|            0|            0|  0.00%|                type=type,
   392|         0|            0|            0|  0.00%|                start=start,
   393|         0|            0|            0|  0.00%|                )
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|    def __contains__(cls, member):
   396|         0|            0|            0|  0.00%|        if not isinstance(member, Enum):
   397|         0|            0|            0|  0.00%|            raise TypeError(
   398|         0|            0|            0|  0.00%|                "unsupported operand type(s) for 'in': '%s' and '%s'" % (
   399|         0|            0|            0|  0.00%|                    type(member).__qualname__, cls.__class__.__qualname__))
   400|         0|            0|            0|  0.00%|        return isinstance(member, cls) and member._name_ in cls._member_map_
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|    def __delattr__(cls, attr):
   403|         0|            0|            0|  0.00%|        # nicer error message when someone tries to delete an attribute
   404|         0|            0|            0|  0.00%|        # (see issue19025).
   405|         0|            0|            0|  0.00%|        if attr in cls._member_map_:
   406|         0|            0|            0|  0.00%|            raise AttributeError("%s: cannot delete Enum member." % cls.__name__)
   407|         0|            0|            0|  0.00%|        super().__delattr__(attr)
   408|         0|            0|            0|  0.00%|
   409|         0|            0|            0|  0.00%|    def __dir__(self):
   410|         0|            0|            0|  0.00%|        return (
   411|         0|            0|            0|  0.00%|                ['__class__', '__doc__', '__members__', '__module__']
   412|         0|            0|            0|  0.00%|                + self._member_names_
   413|         0|            0|            0|  0.00%|                )
   414|         0|            0|            0|  0.00%|
   415|         3|            0|            0|  0.00%|    def __getattr__(cls, name):
   416|         0|            0|            0|  0.00%|        """
   417|         0|            0|            0|  0.00%|        Return the enum member matching `name`
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|        We use __getattr__ instead of descriptors or inserting into the enum
   420|         0|            0|            0|  0.00%|        class' __dict__ in order to support `name` and `value` being both
   421|         0|            0|            0|  0.00%|        properties for enum members (which live in the class' __dict__) and
   422|         0|            0|            0|  0.00%|        enum members themselves.
   423|         0|            0|            0|  0.00%|        """
   424|         3|            0|            0|  0.00%|        if _is_dunder(name):
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:22 _is_dunder
   425|         3|            0|            0|  0.00%|            raise AttributeError(name)
   426|         0|            0|            0|  0.00%|        try:
   427|         0|            0|            0|  0.00%|            return cls._member_map_[name]
   428|         0|            0|            0|  0.00%|        except KeyError:
   429|         0|            0|            0|  0.00%|            raise AttributeError(name) from None
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|    def __getitem__(cls, name):
   432|         0|            0|            0|  0.00%|        return cls._member_map_[name]
   433|         0|            0|            0|  0.00%|
   434|    630990|      1.08407|  1.71805e-06|  0.58%|    def __iter__(cls):
   435|         0|            0|            0|  0.00%|        """
   436|         0|            0|            0|  0.00%|        Returns members in definition order.
   437|         0|            0|            0|  0.00%|        """
   438|  12677094|      26.5778|  2.09652e-06| 14.14%|        return (cls._member_map_[name] for name in cls._member_names_)
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|    def __len__(cls):
   441|         0|            0|            0|  0.00%|        return len(cls._member_names_)
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|    @property
   444|         0|            0|            0|  0.00%|    def __members__(cls):
   445|         0|            0|            0|  0.00%|        """
   446|         0|            0|            0|  0.00%|        Returns a mapping of member name->value.
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|        This mapping lists all enum members, including aliases. Note that this
   449|         0|            0|            0|  0.00%|        is a read-only view of the internal mapping.
   450|         0|            0|            0|  0.00%|        """
   451|         0|            0|            0|  0.00%|        return MappingProxyType(cls._member_map_)
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|    def __repr__(cls):
   454|         0|            0|            0|  0.00%|        return "<enum %r>" % cls.__name__
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|    def __reversed__(cls):
   457|         0|            0|            0|  0.00%|        """
   458|         0|            0|            0|  0.00%|        Returns members in reverse definition order.
   459|         0|            0|            0|  0.00%|        """
   460|         0|            0|            0|  0.00%|        return (cls._member_map_[name] for name in reversed(cls._member_names_))
   461|         0|            0|            0|  0.00%|
   462|        43|            0|            0|  0.00%|    def __setattr__(cls, name, value):
   463|         0|            0|            0|  0.00%|        """
   464|         0|            0|            0|  0.00%|        Block attempts to reassign Enum members.
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|        A simple assignment to the class namespace only changes one of the
   467|         0|            0|            0|  0.00%|        several possible ways to get an Enum member from the Enum class,
   468|         0|            0|            0|  0.00%|        resulting in an inconsistent Enumeration.
   469|         0|            0|            0|  0.00%|        """
   470|        43|            0|            0|  0.00%|        member_map = cls.__dict__.get('_member_map_', {})
   471|        43|            0|            0|  0.00%|        if name in member_map:
   472|         0|            0|            0|  0.00%|            raise AttributeError('Cannot reassign members.')
   473|        43|            0|            0|  0.00%|        super().__setattr__(name, value)
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|    def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1):
   476|         0|            0|            0|  0.00%|        """
   477|         0|            0|            0|  0.00%|        Convenience method to create a new Enum class.
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|        `names` can be:
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|        * A string containing member names, separated either with spaces or
   482|         0|            0|            0|  0.00%|          commas.  Values are incremented by 1 from `start`.
   483|         0|            0|            0|  0.00%|        * An iterable of member names.  Values are incremented by 1 from `start`.
   484|         0|            0|            0|  0.00%|        * An iterable of (member name, value) pairs.
   485|         0|            0|            0|  0.00%|        * A mapping of member name -> value pairs.
   486|         0|            0|            0|  0.00%|        """
   487|         0|            0|            0|  0.00%|        metacls = cls.__class__
   488|         0|            0|            0|  0.00%|        bases = (cls, ) if type is None else (type, cls)
   489|         0|            0|            0|  0.00%|        _, first_enum = cls._get_mixins_(cls, bases)
   490|         0|            0|            0|  0.00%|        classdict = metacls.__prepare__(class_name, bases)
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|        # special processing needed for names?
   493|         0|            0|            0|  0.00%|        if isinstance(names, str):
   494|         0|            0|            0|  0.00%|            names = names.replace(',', ' ').split()
   495|         0|            0|            0|  0.00%|        if isinstance(names, (tuple, list)) and names and isinstance(names[0], str):
   496|         0|            0|            0|  0.00%|            original_names, names = names, []
   497|         0|            0|            0|  0.00%|            last_values = []
   498|         0|            0|            0|  0.00%|            for count, name in enumerate(original_names):
   499|         0|            0|            0|  0.00%|                value = first_enum._generate_next_value_(name, start, count, last_values[:])
   500|         0|            0|            0|  0.00%|                last_values.append(value)
   501|         0|            0|            0|  0.00%|                names.append((name, value))
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|        # Here, names is either an iterable of (name, value) or a mapping.
   504|         0|            0|            0|  0.00%|        for item in names:
   505|         0|            0|            0|  0.00%|            if isinstance(item, str):
   506|         0|            0|            0|  0.00%|                member_name, member_value = item, names[item]
   507|         0|            0|            0|  0.00%|            else:
   508|         0|            0|            0|  0.00%|                member_name, member_value = item
   509|         0|            0|            0|  0.00%|            classdict[member_name] = member_value
   510|         0|            0|            0|  0.00%|        enum_class = metacls.__new__(metacls, class_name, bases, classdict)
   511|         0|            0|            0|  0.00%|
   512|         0|            0|            0|  0.00%|        # TODO: replace the frame hack if a blessed way to know the calling
   513|         0|            0|            0|  0.00%|        # module is ever developed
   514|         0|            0|            0|  0.00%|        if module is None:
   515|         0|            0|            0|  0.00%|            try:
   516|         0|            0|            0|  0.00%|                module = sys._getframe(2).f_globals['__name__']
   517|         0|            0|            0|  0.00%|            except (AttributeError, ValueError, KeyError):
   518|         0|            0|            0|  0.00%|                pass
   519|         0|            0|            0|  0.00%|        if module is None:
   520|         0|            0|            0|  0.00%|            _make_class_unpicklable(enum_class)
   521|         0|            0|            0|  0.00%|        else:
   522|         0|            0|            0|  0.00%|            enum_class.__module__ = module
   523|         0|            0|            0|  0.00%|        if qualname is not None:
   524|         0|            0|            0|  0.00%|            enum_class.__qualname__ = qualname
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|        return enum_class
   527|         0|            0|            0|  0.00%|
   528|         0|            0|            0|  0.00%|    def _convert_(cls, name, module, filter, source=None):
   529|         0|            0|            0|  0.00%|        """
   530|         0|            0|            0|  0.00%|        Create a new Enum subclass that replaces a collection of global constants
   531|         0|            0|            0|  0.00%|        """
   532|         0|            0|            0|  0.00%|        # convert all constants from source (or module) that pass filter() to
   533|         0|            0|            0|  0.00%|        # a new Enum called name, and export the enum and its members back to
   534|         0|            0|            0|  0.00%|        # module;
   535|         0|            0|            0|  0.00%|        # also, replace the __reduce_ex__ method so unpickling works in
   536|         0|            0|            0|  0.00%|        # previous Python versions
   537|         0|            0|            0|  0.00%|        module_globals = vars(sys.modules[module])
   538|         0|            0|            0|  0.00%|        if source:
   539|         0|            0|            0|  0.00%|            source = vars(source)
   540|         0|            0|            0|  0.00%|        else:
   541|         0|            0|            0|  0.00%|            source = module_globals
   542|         0|            0|            0|  0.00%|        # _value2member_map_ is populated in the same order every time
   543|         0|            0|            0|  0.00%|        # for a consistent reverse mapping of number to name when there
   544|         0|            0|            0|  0.00%|        # are multiple names for the same number.
   545|         0|            0|            0|  0.00%|        members = [
   546|         0|            0|            0|  0.00%|                (name, value)
   547|         0|            0|            0|  0.00%|                for name, value in source.items()
   548|         0|            0|            0|  0.00%|                if filter(name)]
   549|         0|            0|            0|  0.00%|        try:
   550|         0|            0|            0|  0.00%|            # sort by value
   551|         0|            0|            0|  0.00%|            members.sort(key=lambda t: (t[1], t[0]))
   552|         0|            0|            0|  0.00%|        except TypeError:
   553|         0|            0|            0|  0.00%|            # unless some values aren't comparable, in which case sort by name
   554|         0|            0|            0|  0.00%|            members.sort(key=lambda t: t[0])
   555|         0|            0|            0|  0.00%|        cls = cls(name, members, module=module)
   556|         0|            0|            0|  0.00%|        cls.__reduce_ex__ = _reduce_ex_by_name
   557|         0|            0|            0|  0.00%|        module_globals.update(cls.__members__)
   558|         0|            0|            0|  0.00%|        module_globals[name] = cls
   559|         0|            0|            0|  0.00%|        return cls
   560|         0|            0|            0|  0.00%|
   561|         3|            0|            0|  0.00%|    @staticmethod
   562|         0|            0|            0|  0.00%|    def _check_for_existing_members(class_name, bases):
   563|         8|            0|            0|  0.00%|        for chain in bases:
   564|        15|            0|            0|  0.00%|            for base in chain.__mro__:
   565|        10|            0|            0|  0.00%|                if issubclass(base, Enum) and base._member_names_:
   566|         0|            0|            0|  0.00%|                    raise TypeError(
   567|         0|            0|            0|  0.00%|                            "%s: cannot extend enumeration %r"
   568|         0|            0|            0|  0.00%|                            % (class_name, base.__name__)
   569|         0|            0|            0|  0.00%|                            )
   570|         0|            0|            0|  0.00%|
   571|         6|            0|            0|  0.00%|    @staticmethod
   572|         0|            0|            0|  0.00%|    def _get_mixins_(class_name, bases):
   573|         0|            0|            0|  0.00%|        """
   574|         0|            0|            0|  0.00%|        Returns the type for creating enum members, and the first inherited
   575|         0|            0|            0|  0.00%|        enum class.
   576|         0|            0|            0|  0.00%|
   577|         0|            0|            0|  0.00%|        bases: the tuple of bases that was given to __new__
   578|         0|            0|            0|  0.00%|        """
   579|         6|            0|            0|  0.00%|        if not bases:
   580|         0|            0|            0|  0.00%|            return object, Enum
   581|         0|            0|            0|  0.00%|
   582|        12|            0|            0|  0.00%|        def _find_data_type(bases):
   583|         6|            0|            0|  0.00%|            data_types = set()
   584|        16|            0|            0|  0.00%|            for chain in bases:
   585|        10|            0|            0|  0.00%|                candidate = None
   586|        22|            0|            0|  0.00%|                for base in chain.__mro__:
   587|        16|            0|            0|  0.00%|                    if base is object:
   588|         6|            0|            0|  0.00%|                        continue
   589|        10|            0|            0|  0.00%|                    elif issubclass(base, Enum):
   590|         6|            0|            0|  0.00%|                        if base._member_type_ is not object:
   591|         0|            0|            0|  0.00%|                            data_types.add(base._member_type_)
   592|         0|            0|            0|  0.00%|                            break
   593|         4|            0|            0|  0.00%|                    elif '__new__' in base.__dict__:
   594|         4|            0|            0|  0.00%|                        if issubclass(base, Enum):
   595|         0|            0|            0|  0.00%|                            continue
   596|         4|            0|            0|  0.00%|                        data_types.add(candidate or base)
   597|         4|            0|            0|  0.00%|                        break
   598|         0|            0|            0|  0.00%|                    else:
   599|         0|            0|            0|  0.00%|                        candidate = candidate or base
   600|         6|            0|            0|  0.00%|            if len(data_types) > 1:
   601|         0|            0|            0|  0.00%|                raise TypeError('%r: too many data types: %r' % (class_name, data_types))
   602|         6|            0|            0|  0.00%|            elif data_types:
   603|         4|            0|            0|  0.00%|                return data_types.pop()
   604|         0|            0|            0|  0.00%|            else:
   605|         2|            0|            0|  0.00%|                return None
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|        # ensure final parent class is an Enum derivative, find any concrete
   608|         0|            0|            0|  0.00%|        # data type, and check that Enum has no members
   609|         6|            0|            0|  0.00%|        first_enum = bases[-1]
   610|         6|            0|            0|  0.00%|        if not issubclass(first_enum, Enum):
   611|         0|            0|            0|  0.00%|            raise TypeError("new enumerations should be created as "
   612|         0|            0|            0|  0.00%|                    "`EnumName([mixin_type, ...] [data_type,] enum_type)`")
   613|         6|            0|            0|  0.00%|        member_type = _find_data_type(bases) or object
(call)|         6|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:582 _find_data_type
   614|         6|            0|            0|  0.00%|        if first_enum._member_names_:
   615|         0|            0|            0|  0.00%|            raise TypeError("Cannot extend enumerations")
   616|         6|            0|            0|  0.00%|        return member_type, first_enum
   617|         0|            0|            0|  0.00%|
   618|         3|            0|            0|  0.00%|    @staticmethod
   619|         0|            0|            0|  0.00%|    def _find_new_(classdict, member_type, first_enum):
   620|         0|            0|            0|  0.00%|        """
   621|         0|            0|            0|  0.00%|        Returns the __new__ to be used for creating the enum members.
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|        classdict: the class dictionary given to __new__
   624|         0|            0|            0|  0.00%|        member_type: the data type whose __new__ will be used by default
   625|         0|            0|            0|  0.00%|        first_enum: enumeration to check for an overriding __new__
   626|         0|            0|            0|  0.00%|        """
   627|         0|            0|            0|  0.00%|        # now find the correct __new__, checking to see of one was defined
   628|         0|            0|            0|  0.00%|        # by the user; also check earlier enum classes in case a __new__ was
   629|         0|            0|            0|  0.00%|        # saved as __new_member__
   630|         3|            0|            0|  0.00%|        __new__ = classdict.get('__new__', None)
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|        # should __new__ be saved as __new_member__ later?
   633|         3|            0|            0|  0.00%|        save_new = __new__ is not None
   634|         0|            0|            0|  0.00%|
   635|         3|            0|            0|  0.00%|        if __new__ is None:
   636|         0|            0|            0|  0.00%|            # check all possibles for __new_member__ before falling back to
   637|         0|            0|            0|  0.00%|            # __new__
   638|         7|            0|            0|  0.00%|            for method in ('__new_member__', '__new__'):
   639|        14|            0|            0|  0.00%|                for possible in (member_type, first_enum):
   640|        10|            0|            0|  0.00%|                    target = getattr(possible, method, None)
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:415 __getattr__
   641|        20|            0|            0|  0.00%|                    if target not in {
   642|        10|            0|            0|  0.00%|                            None,
   643|        10|            0|            0|  0.00%|                            None.__new__,
   644|        10|            0|            0|  0.00%|                            object.__new__,
   645|        10|            0|            0|  0.00%|                            Enum.__new__,
   646|         0|            0|            0|  0.00%|                            }:
   647|         2|            0|            0|  0.00%|                        __new__ = target
   648|         2|            0|            0|  0.00%|                        break
   649|         6|            0|            0|  0.00%|                if __new__ is not None:
   650|         2|            0|            0|  0.00%|                    break
   651|         0|            0|            0|  0.00%|            else:
   652|         1|            0|            0|  0.00%|                __new__ = object.__new__
   653|         0|            0|            0|  0.00%|
   654|         0|            0|            0|  0.00%|        # if a non-object.__new__ is used then whatever value/tuple was
   655|         0|            0|            0|  0.00%|        # assigned to the enum member name will be passed to __new__ and to the
   656|         0|            0|            0|  0.00%|        # new enum member's __init__
   657|         3|            0|            0|  0.00%|        if __new__ is object.__new__:
   658|         1|            0|            0|  0.00%|            use_args = False
   659|         0|            0|            0|  0.00%|        else:
   660|         2|            0|            0|  0.00%|            use_args = True
   661|         3|            0|            0|  0.00%|        return __new__, save_new, use_args
   662|         0|            0|            0|  0.00%|
   663|         0|            0|            0|  0.00%|
   664|         0|            0|            0|  0.00%|class Enum(metaclass=EnumMeta):
   665|         0|            0|            0|  0.00%|    """
   666|         0|            0|            0|  0.00%|    Generic enumeration.
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|    Derive from this class to define new enumerations.
   669|         0|            0|            0|  0.00%|    """
   670|    458933|     0.908581|  1.97977e-06|  0.48%|    def __new__(cls, value):
   671|         0|            0|            0|  0.00%|        # all enum instances are actually created during class construction
   672|         0|            0|            0|  0.00%|        # without calling this method; this method is called by the metaclass'
   673|         0|            0|            0|  0.00%|        # __call__ (i.e. Color(3) ), and by pickle
   674|    458933|      1.20135|   2.6177e-06|  0.64%|        if type(value) is cls:
   675|         0|            0|            0|  0.00%|            # For lookups like Color(Color.RED)
   676|        45|            0|            0|  0.00%|            return value
   677|         0|            0|            0|  0.00%|        # by-value search for a matching enum member
   678|         0|            0|            0|  0.00%|        # see if it's in the reverse mapping (for hashable values)
   679|    458888|      1.21998|  2.65855e-06|  0.65%|        try:
   680|    458888|      1.33504|  2.90929e-06|  0.71%|            return cls._value2member_map_[value]
   681|         0|            0|            0|  0.00%|        except KeyError:
   682|         0|            0|            0|  0.00%|            # Not found, no need to do long O(n) search
   683|         0|            0|            0|  0.00%|            pass
   684|         0|            0|            0|  0.00%|        except TypeError:
   685|         0|            0|            0|  0.00%|            # not there, now do long search -- O(n) behavior
   686|         0|            0|            0|  0.00%|            for member in cls._member_map_.values():
   687|         0|            0|            0|  0.00%|                if member._value_ == value:
   688|         0|            0|            0|  0.00%|                    return member
   689|         0|            0|            0|  0.00%|        # still not found -- try _missing_ hook
   690|         0|            0|            0|  0.00%|        try:
   691|         0|            0|            0|  0.00%|            exc = None
   692|         0|            0|            0|  0.00%|            result = cls._missing_(value)
   693|         0|            0|            0|  0.00%|        except Exception as e:
   694|         0|            0|            0|  0.00%|            exc = e
   695|         0|            0|            0|  0.00%|            result = None
   696|         0|            0|            0|  0.00%|        try:
   697|         0|            0|            0|  0.00%|            if isinstance(result, cls):
   698|         0|            0|            0|  0.00%|                return result
   699|         0|            0|            0|  0.00%|            else:
   700|         0|            0|            0|  0.00%|                ve_exc = ValueError("%r is not a valid %s" % (value, cls.__qualname__))
   701|         0|            0|            0|  0.00%|                if result is None and exc is None:
   702|         0|            0|            0|  0.00%|                    raise ve_exc
   703|         0|            0|            0|  0.00%|                elif exc is None:
   704|         0|            0|            0|  0.00%|                    exc = TypeError(
   705|         0|            0|            0|  0.00%|                            'error in %s._missing_: returned %r instead of None or a valid member'
   706|         0|            0|            0|  0.00%|                            % (cls.__name__, result)
   707|         0|            0|            0|  0.00%|                            )
   708|         0|            0|            0|  0.00%|                exc.__context__ = ve_exc
   709|         0|            0|            0|  0.00%|                raise exc
   710|         0|            0|            0|  0.00%|        finally:
   711|         0|            0|            0|  0.00%|            # ensure all variables that could hold an exception are destroyed
   712|         0|            0|            0|  0.00%|            exc = None
   713|         0|            0|            0|  0.00%|            ve_exc = None
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|    def _generate_next_value_(name, start, count, last_values):
   716|         0|            0|            0|  0.00%|        """
   717|         0|            0|            0|  0.00%|        Generate the next value when not given.
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|        name: the name of the member
   720|         0|            0|            0|  0.00%|        start: the initial start value or None
   721|         0|            0|            0|  0.00%|        count: the number of existing members
   722|         0|            0|            0|  0.00%|        last_value: the last value assigned or None
   723|         0|            0|            0|  0.00%|        """
   724|         0|            0|            0|  0.00%|        for last_value in reversed(last_values):
   725|         0|            0|            0|  0.00%|            try:
   726|         0|            0|            0|  0.00%|                return last_value + 1
   727|         0|            0|            0|  0.00%|            except TypeError:
   728|         0|            0|            0|  0.00%|                pass
   729|         0|            0|            0|  0.00%|        else:
   730|         0|            0|            0|  0.00%|            return start
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|    @classmethod
   733|         0|            0|            0|  0.00%|    def _missing_(cls, value):
   734|         0|            0|            0|  0.00%|        return None
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|    def __repr__(self):
   737|         0|            0|            0|  0.00%|        return "<%s.%s: %r>" % (
   738|         0|            0|            0|  0.00%|                self.__class__.__name__, self._name_, self._value_)
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|    def __str__(self):
   741|         0|            0|            0|  0.00%|        return "%s.%s" % (self.__class__.__name__, self._name_)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|    def __dir__(self):
   744|         0|            0|            0|  0.00%|        """
   745|         0|            0|            0|  0.00%|        Returns all members and all public methods
   746|         0|            0|            0|  0.00%|        """
   747|         0|            0|            0|  0.00%|        added_behavior = [
   748|         0|            0|            0|  0.00%|                m
   749|         0|            0|            0|  0.00%|                for cls in self.__class__.mro()
   750|         0|            0|            0|  0.00%|                for m in cls.__dict__
   751|         0|            0|            0|  0.00%|                if m[0] != '_' and m not in self._member_map_
   752|         0|            0|            0|  0.00%|                ] + [m for m in self.__dict__ if m[0] != '_']
   753|         0|            0|            0|  0.00%|        return (['__class__', '__doc__', '__module__'] + added_behavior)
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|    def __format__(self, format_spec):
   756|         0|            0|            0|  0.00%|        """
   757|         0|            0|            0|  0.00%|        Returns format using actual value type unless __str__ has been overridden.
   758|         0|            0|            0|  0.00%|        """
   759|         0|            0|            0|  0.00%|        # mixed-in Enums should use the mixed-in type's __format__, otherwise
   760|         0|            0|            0|  0.00%|        # we can get strange results with the Enum name showing up instead of
   761|         0|            0|            0|  0.00%|        # the value
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|        # pure Enum branch, or branch with __str__ explicitly overridden
   764|         0|            0|            0|  0.00%|        str_overridden = type(self).__str__ not in (Enum.__str__, Flag.__str__)
   765|         0|            0|            0|  0.00%|        if self._member_type_ is object or str_overridden:
   766|         0|            0|            0|  0.00%|            cls = str
   767|         0|            0|            0|  0.00%|            val = str(self)
   768|         0|            0|            0|  0.00%|        # mix-in branch
   769|         0|            0|            0|  0.00%|        else:
   770|         0|            0|            0|  0.00%|            cls = self._member_type_
   771|         0|            0|            0|  0.00%|            val = self._value_
   772|         0|            0|            0|  0.00%|        return cls.__format__(val, format_spec)
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|    def __hash__(self):
   775|         0|            0|            0|  0.00%|        return hash(self._name_)
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|    def __reduce_ex__(self, proto):
   778|         0|            0|            0|  0.00%|        return self.__class__, (self._value_, )
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|    # DynamicClassAttribute is used to provide access to the `name` and
   781|         0|            0|            0|  0.00%|    # `value` properties of enum members while keeping some measure of
   782|         0|            0|            0|  0.00%|    # protection from modification, while still allowing for an enumeration
   783|         0|            0|            0|  0.00%|    # to have members named `name` and `value`.  This works because enumeration
   784|         0|            0|            0|  0.00%|    # members are not set directly on the enum class -- __getattr__ is
   785|         0|            0|            0|  0.00%|    # used to look them up.
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|    @DynamicClassAttribute
   788|         0|            0|            0|  0.00%|    def name(self):
   789|         0|            0|            0|  0.00%|        """The name of the Enum member."""
   790|         0|            0|            0|  0.00%|        return self._name_
   791|         0|            0|            0|  0.00%|
   792|    764800|      1.16795|  1.52714e-06|  0.62%|    @DynamicClassAttribute
   793|         0|            0|            0|  0.00%|    def value(self):
   794|         0|            0|            0|  0.00%|        """The value of the Enum member."""
   795|    764800|      1.76412|  2.30665e-06|  0.94%|        return self._value_
   796|         0|            0|            0|  0.00%|
   797|         0|            0|            0|  0.00%|
   798|         0|            0|            0|  0.00%|class IntEnum(int, Enum):
   799|         0|            0|            0|  0.00%|    """Enum where members are also (and must be) ints"""
   800|         0|            0|            0|  0.00%|
   801|         0|            0|            0|  0.00%|
   802|         0|            0|            0|  0.00%|def _reduce_ex_by_name(self, proto):
   803|         0|            0|            0|  0.00%|    return self.name
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|class Flag(Enum):
   806|         0|            0|            0|  0.00%|    """
   807|         0|            0|            0|  0.00%|    Support for flags
   808|         0|            0|            0|  0.00%|    """
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|    def _generate_next_value_(name, start, count, last_values):
   811|         0|            0|            0|  0.00%|        """
   812|         0|            0|            0|  0.00%|        Generate the next value when not given.
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|        name: the name of the member
   815|         0|            0|            0|  0.00%|        start: the initial start value or None
   816|         0|            0|            0|  0.00%|        count: the number of existing members
   817|         0|            0|            0|  0.00%|        last_value: the last value assigned or None
   818|         0|            0|            0|  0.00%|        """
   819|         0|            0|            0|  0.00%|        if not count:
   820|         0|            0|            0|  0.00%|            return start if start is not None else 1
   821|         0|            0|            0|  0.00%|        for last_value in reversed(last_values):
   822|         0|            0|            0|  0.00%|            try:
   823|         0|            0|            0|  0.00%|                high_bit = _high_bit(last_value)
   824|         0|            0|            0|  0.00%|                break
   825|         0|            0|            0|  0.00%|            except Exception:
   826|         0|            0|            0|  0.00%|                raise TypeError('Invalid Flag value: %r' % last_value) from None
   827|         0|            0|            0|  0.00%|        return 2 ** (high_bit+1)
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|    @classmethod
   830|         0|            0|            0|  0.00%|    def _missing_(cls, value):
   831|         0|            0|            0|  0.00%|        """
   832|         0|            0|            0|  0.00%|        Returns member (possibly creating it) if one can be found for value.
   833|         0|            0|            0|  0.00%|        """
   834|         0|            0|            0|  0.00%|        original_value = value
   835|         0|            0|            0|  0.00%|        if value < 0:
   836|         0|            0|            0|  0.00%|            value = ~value
   837|         0|            0|            0|  0.00%|        possible_member = cls._create_pseudo_member_(value)
   838|         0|            0|            0|  0.00%|        if original_value < 0:
   839|         0|            0|            0|  0.00%|            possible_member = ~possible_member
   840|         0|            0|            0|  0.00%|        return possible_member
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|    @classmethod
   843|         0|            0|            0|  0.00%|    def _create_pseudo_member_(cls, value):
   844|         0|            0|            0|  0.00%|        """
   845|         0|            0|            0|  0.00%|        Create a composite member iff value contains only members.
   846|         0|            0|            0|  0.00%|        """
   847|         0|            0|            0|  0.00%|        pseudo_member = cls._value2member_map_.get(value, None)
   848|         0|            0|            0|  0.00%|        if pseudo_member is None:
   849|         0|            0|            0|  0.00%|            # verify all bits are accounted for
   850|         0|            0|            0|  0.00%|            _, extra_flags = _decompose(cls, value)
   851|         0|            0|            0|  0.00%|            if extra_flags:
   852|         0|            0|            0|  0.00%|                raise ValueError("%r is not a valid %s" % (value, cls.__qualname__))
   853|         0|            0|            0|  0.00%|            # construct a singleton enum pseudo-member
   854|         0|            0|            0|  0.00%|            pseudo_member = object.__new__(cls)
   855|         0|            0|            0|  0.00%|            pseudo_member._name_ = None
   856|         0|            0|            0|  0.00%|            pseudo_member._value_ = value
   857|         0|            0|            0|  0.00%|            # use setdefault in case another thread already created a composite
   858|         0|            0|            0|  0.00%|            # with this value
   859|         0|            0|            0|  0.00%|            pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)
   860|         0|            0|            0|  0.00%|        return pseudo_member
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|    def __contains__(self, other):
   863|         0|            0|            0|  0.00%|        """
   864|         0|            0|            0|  0.00%|        Returns True if self has at least the same flags set as other.
   865|         0|            0|            0|  0.00%|        """
   866|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   867|         0|            0|            0|  0.00%|            raise TypeError(
   868|         0|            0|            0|  0.00%|                "unsupported operand type(s) for 'in': '%s' and '%s'" % (
   869|         0|            0|            0|  0.00%|                    type(other).__qualname__, self.__class__.__qualname__))
   870|         0|            0|            0|  0.00%|        return other._value_ & self._value_ == other._value_
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|    def __repr__(self):
   873|         0|            0|            0|  0.00%|        cls = self.__class__
   874|         0|            0|            0|  0.00%|        if self._name_ is not None:
   875|         0|            0|            0|  0.00%|            return '<%s.%s: %r>' % (cls.__name__, self._name_, self._value_)
   876|         0|            0|            0|  0.00%|        members, uncovered = _decompose(cls, self._value_)
   877|         0|            0|            0|  0.00%|        return '<%s.%s: %r>' % (
   878|         0|            0|            0|  0.00%|                cls.__name__,
   879|         0|            0|            0|  0.00%|                '|'.join([str(m._name_ or m._value_) for m in members]),
   880|         0|            0|            0|  0.00%|                self._value_,
   881|         0|            0|            0|  0.00%|                )
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|    def __str__(self):
   884|         0|            0|            0|  0.00%|        cls = self.__class__
   885|         0|            0|            0|  0.00%|        if self._name_ is not None:
   886|         0|            0|            0|  0.00%|            return '%s.%s' % (cls.__name__, self._name_)
   887|         0|            0|            0|  0.00%|        members, uncovered = _decompose(cls, self._value_)
   888|         0|            0|            0|  0.00%|        if len(members) == 1 and members[0]._name_ is None:
   889|         0|            0|            0|  0.00%|            return '%s.%r' % (cls.__name__, members[0]._value_)
   890|         0|            0|            0|  0.00%|        else:
   891|         0|            0|            0|  0.00%|            return '%s.%s' % (
   892|         0|            0|            0|  0.00%|                    cls.__name__,
   893|         0|            0|            0|  0.00%|                    '|'.join([str(m._name_ or m._value_) for m in members]),
   894|         0|            0|            0|  0.00%|                    )
   895|         0|            0|            0|  0.00%|
   896|         0|            0|            0|  0.00%|    def __bool__(self):
   897|         0|            0|            0|  0.00%|        return bool(self._value_)
   898|         0|            0|            0|  0.00%|
   899|         0|            0|            0|  0.00%|    def __or__(self, other):
   900|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   901|         0|            0|            0|  0.00%|            return NotImplemented
   902|         0|            0|            0|  0.00%|        return self.__class__(self._value_ | other._value_)
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|    def __and__(self, other):
   905|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   906|         0|            0|            0|  0.00%|            return NotImplemented
   907|         0|            0|            0|  0.00%|        return self.__class__(self._value_ & other._value_)
   908|         0|            0|            0|  0.00%|
   909|         0|            0|            0|  0.00%|    def __xor__(self, other):
   910|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   911|         0|            0|            0|  0.00%|            return NotImplemented
   912|         0|            0|            0|  0.00%|        return self.__class__(self._value_ ^ other._value_)
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|    def __invert__(self):
   915|         0|            0|            0|  0.00%|        members, uncovered = _decompose(self.__class__, self._value_)
   916|         0|            0|            0|  0.00%|        inverted = self.__class__(0)
   917|         0|            0|            0|  0.00%|        for m in self.__class__:
   918|         0|            0|            0|  0.00%|            if m not in members and not (m._value_ & self._value_):
   919|         0|            0|            0|  0.00%|                inverted = inverted | m
   920|         0|            0|            0|  0.00%|        return self.__class__(inverted)
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|class IntFlag(int, Flag):
   924|         0|            0|            0|  0.00%|    """
   925|         0|            0|            0|  0.00%|    Support for integer-based Flags
   926|         0|            0|            0|  0.00%|    """
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|    @classmethod
   929|         0|            0|            0|  0.00%|    def _missing_(cls, value):
   930|         0|            0|            0|  0.00%|        """
   931|         0|            0|            0|  0.00%|        Returns member (possibly creating it) if one can be found for value.
   932|         0|            0|            0|  0.00%|        """
   933|         0|            0|            0|  0.00%|        if not isinstance(value, int):
   934|         0|            0|            0|  0.00%|            raise ValueError("%r is not a valid %s" % (value, cls.__qualname__))
   935|         0|            0|            0|  0.00%|        new_member = cls._create_pseudo_member_(value)
   936|         0|            0|            0|  0.00%|        return new_member
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|    @classmethod
   939|         0|            0|            0|  0.00%|    def _create_pseudo_member_(cls, value):
   940|         0|            0|            0|  0.00%|        """
   941|         0|            0|            0|  0.00%|        Create a composite member iff value contains only members.
   942|         0|            0|            0|  0.00%|        """
   943|         0|            0|            0|  0.00%|        pseudo_member = cls._value2member_map_.get(value, None)
   944|         0|            0|            0|  0.00%|        if pseudo_member is None:
   945|         0|            0|            0|  0.00%|            need_to_create = [value]
   946|         0|            0|            0|  0.00%|            # get unaccounted for bits
   947|         0|            0|            0|  0.00%|            _, extra_flags = _decompose(cls, value)
   948|         0|            0|            0|  0.00%|            # timer = 10
   949|         0|            0|            0|  0.00%|            while extra_flags:
   950|         0|            0|            0|  0.00%|                # timer -= 1
   951|         0|            0|            0|  0.00%|                bit = _high_bit(extra_flags)
   952|         0|            0|            0|  0.00%|                flag_value = 2 ** bit
   953|         0|            0|            0|  0.00%|                if (flag_value not in cls._value2member_map_ and
   954|         0|            0|            0|  0.00%|                        flag_value not in need_to_create
   955|         0|            0|            0|  0.00%|                        ):
   956|         0|            0|            0|  0.00%|                    need_to_create.append(flag_value)
   957|         0|            0|            0|  0.00%|                if extra_flags == -flag_value:
   958|         0|            0|            0|  0.00%|                    extra_flags = 0
   959|         0|            0|            0|  0.00%|                else:
   960|         0|            0|            0|  0.00%|                    extra_flags ^= flag_value
   961|         0|            0|            0|  0.00%|            for value in reversed(need_to_create):
   962|         0|            0|            0|  0.00%|                # construct singleton pseudo-members
   963|         0|            0|            0|  0.00%|                pseudo_member = int.__new__(cls, value)
   964|         0|            0|            0|  0.00%|                pseudo_member._name_ = None
   965|         0|            0|            0|  0.00%|                pseudo_member._value_ = value
   966|         0|            0|            0|  0.00%|                # use setdefault in case another thread already created a composite
   967|         0|            0|            0|  0.00%|                # with this value
   968|         0|            0|            0|  0.00%|                pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)
   969|         0|            0|            0|  0.00%|        return pseudo_member
   970|         0|            0|            0|  0.00%|
   971|         0|            0|            0|  0.00%|    def __or__(self, other):
   972|         0|            0|            0|  0.00%|        if not isinstance(other, (self.__class__, int)):
   973|         0|            0|            0|  0.00%|            return NotImplemented
   974|         0|            0|            0|  0.00%|        result = self.__class__(self._value_ | self.__class__(other)._value_)
   975|         0|            0|            0|  0.00%|        return result
   976|         0|            0|            0|  0.00%|
   977|         4|            0|            0|  0.00%|    def __and__(self, other):
   978|         4|            0|            0|  0.00%|        if not isinstance(other, (self.__class__, int)):
   979|         0|            0|            0|  0.00%|            return NotImplemented
   980|         4|            0|            0|  0.00%|        return self.__class__(self._value_ & self.__class__(other)._value_)
(call)|         8|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:358 __call__
   981|         0|            0|            0|  0.00%|
   982|         0|            0|            0|  0.00%|    def __xor__(self, other):
   983|         0|            0|            0|  0.00%|        if not isinstance(other, (self.__class__, int)):
   984|         0|            0|            0|  0.00%|            return NotImplemented
   985|         0|            0|            0|  0.00%|        return self.__class__(self._value_ ^ self.__class__(other)._value_)
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    __ror__ = __or__
   988|         0|            0|            0|  0.00%|    __rand__ = __and__
   989|         0|            0|            0|  0.00%|    __rxor__ = __xor__
   990|         0|            0|            0|  0.00%|
   991|         0|            0|            0|  0.00%|    def __invert__(self):
   992|         0|            0|            0|  0.00%|        result = self.__class__(~self._value_)
   993|         0|            0|            0|  0.00%|        return result
   994|         0|            0|            0|  0.00%|
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|def _high_bit(value):
   997|         0|            0|            0|  0.00%|    """
   998|         0|            0|            0|  0.00%|    returns index of highest bit, or -1 if value is zero or negative
   999|         0|            0|            0|  0.00%|    """
  1000|         0|            0|            0|  0.00%|    return value.bit_length() - 1
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|def unique(enumeration):
  1003|         0|            0|            0|  0.00%|    """
  1004|         0|            0|            0|  0.00%|    Class decorator for enumerations ensuring unique member values.
  1005|         0|            0|            0|  0.00%|    """
  1006|         0|            0|            0|  0.00%|    duplicates = []
  1007|         0|            0|            0|  0.00%|    for name, member in enumeration.__members__.items():
  1008|         0|            0|            0|  0.00%|        if name != member.name:
  1009|         0|            0|            0|  0.00%|            duplicates.append((name, member.name))
  1010|         0|            0|            0|  0.00%|    if duplicates:
  1011|         0|            0|            0|  0.00%|        alias_details = ', '.join(
  1012|         0|            0|            0|  0.00%|                ["%s -> %s" % (alias, name) for (alias, name) in duplicates])
  1013|         0|            0|            0|  0.00%|        raise ValueError('duplicate values found in %r: %s' %
  1014|         0|            0|            0|  0.00%|                (enumeration, alias_details))
  1015|         0|            0|            0|  0.00%|    return enumeration
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|def _decompose(flag, value):
  1018|         0|            0|            0|  0.00%|    """
  1019|         0|            0|            0|  0.00%|    Extract all members from the value.
  1020|         0|            0|            0|  0.00%|    """
  1021|         0|            0|            0|  0.00%|    # _decompose is only called if the value is not named
  1022|         0|            0|            0|  0.00%|    not_covered = value
  1023|         0|            0|            0|  0.00%|    negative = value < 0
  1024|         0|            0|            0|  0.00%|    members = []
  1025|         0|            0|            0|  0.00%|    for member in flag:
  1026|         0|            0|            0|  0.00%|        member_value = member.value
  1027|         0|            0|            0|  0.00%|        if member_value and member_value & value == member_value:
  1028|         0|            0|            0|  0.00%|            members.append(member)
  1029|         0|            0|            0|  0.00%|            not_covered &= ~member_value
  1030|         0|            0|            0|  0.00%|    if not negative:
  1031|         0|            0|            0|  0.00%|        tmp = not_covered
  1032|         0|            0|            0|  0.00%|        while tmp:
  1033|         0|            0|            0|  0.00%|            flag_value = 2 ** _high_bit(tmp)
  1034|         0|            0|            0|  0.00%|            if flag_value in flag._value2member_map_:
  1035|         0|            0|            0|  0.00%|                members.append(flag._value2member_map_[flag_value])
  1036|         0|            0|            0|  0.00%|                not_covered &= ~flag_value
  1037|         0|            0|            0|  0.00%|            tmp &= ~flag_value
  1038|         0|            0|            0|  0.00%|    if not members and value in flag._value2member_map_:
  1039|         0|            0|            0|  0.00%|        members.append(flag._value2member_map_[value])
  1040|         0|            0|            0|  0.00%|    members.sort(key=lambda m: m._value_, reverse=True)
  1041|         0|            0|            0|  0.00%|    if len(members) > 1 and members[0].value == value:
  1042|         0|            0|            0|  0.00%|        # we have the breakdown, don't need the value member itself
  1043|         0|            0|            0|  0.00%|        members.pop(0)
  1044|         0|            0|            0|  0.00%|    return members, not_covered
File: G:\Autres\DofusDamageCalculator\damage_parameters.py
File duration: 26.4882s (14.10%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|        11|            0|            0|  0.00%|from dataclasses import dataclass, field
     2|    172093|     0.419581|  2.43811e-06|  0.22%|import re
     3|    172090|     0.511358|  2.97146e-06|  0.27%|from typing import Dict, List, Literal, Set, Union
     4|    172090|      1.16678|  6.78007e-06|  0.62%|
(call)|    172089|     0.648829|  3.77031e-06|  0.35%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:11 <lambda>
     5|    172090|      0.48472|  2.81666e-06|  0.26%|from stats import Stats, Characteristics
(call)|         1|    0.0209446|    0.0209446|  0.01%|# <frozen importlib._bootstrap>:1002 _find_and_load
     6|    172090|       1.1947|  6.94231e-06|  0.64%|
(call)|    172089|     0.603458|  3.50666e-06|  0.32%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:13 <lambda>
     7|    172089|     0.446632|  2.59535e-06|  0.24%|
     8|    172092|      1.18711|  6.89809e-06|  0.63%|@dataclass
(call)|    172089|     0.679406|  3.94799e-06|  0.36%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:15 <lambda>
     9|    172090|     0.451432|  2.62323e-06|  0.24%|class DamageParameters:
(call)|         1|   0.00399041|   0.00399041|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:8 DamageParameters
(call)|         5|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:281 __set_name__
(call)|         1|   0.00897503|   0.00897503|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:998 dataclass
    10|    172090|     0.458371|  2.66355e-06|  0.24%|    full_name: str = ''
    11|    516268|      1.80182|  3.49008e-06|  0.96%|    stats: List[str] = field(default_factory=lambda: [])
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|  0.000997305|  0.000997305|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
(call)|    172089|     0.653497|  3.79744e-06|  0.35%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:18 <lambda>
    12|    172090|      1.12168|  6.51798e-06|  0.60%|    pa: int = 1
(call)|    172089|     0.696074|  4.04485e-06|  0.37%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:19 <lambda>
    13|    344180|     0.603458|  1.75332e-06|  0.32%|    po: List[int] = field(default_factory=lambda: [0, 2048])
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    14|         1|            0|            0|  0.00%|    type: Literal['mono', 'multi', 'versa'] = 'mono'
(call)|         1|  0.000997543|  0.000997543|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:358 __getitem__
    15|    344179|     0.679406|  1.97399e-06|  0.36%|    resistances: List[int] = field(default_factory=lambda: [0, 0, 0, 0, 0])
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    16|         1|            0|            0|  0.00%|    distance: Literal['melee', 'range'] = 'range'
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:358 __getitem__
    17|         1|            0|            0|  0.00%|    vulnerability: int = 0
    18|    344179|     0.653497|  1.89871e-06|  0.35%|    base_damages: List[int] = field(default_factory=lambda: [0, 0, 0, 0, 0])
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    19|    344179|     0.696074|  2.02242e-06|  0.37%|    starting_states: Set[str] = field(default_factory=lambda: set())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|  0.000997066|  0.000997066|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|        10|            0|            0|  0.00%|    def get_min_po(self):
    23|         9|            0|            0|  0.00%|        return self.po[0]
    24|         0|            0|            0|  0.00%|
    25|         9|            0|            0|  0.00%|    def get_max_po(self):
    26|         8|            0|            0|  0.00%|        return self.po[1]
    27|         0|            0|            0|  0.00%|
    28|     76481|     0.167447|  2.18939e-06|  0.09%|    def get_resistances_dict(self):
    29|         0|            0|            0|  0.00%|        # Reorder from STRENGTH/INTELLIGENCE/LUCK/AGILITY/NEUTRAL to NEUTRAL/STRENGTH/INTELLIGENCE/LUCK/AGILITY
    30|    611840|      3.86666|  6.31972e-06|  2.06%|        return {Characteristics(str(k - 1) if k > 0 else '4'): self.resistances[k] for k in range(5)}
(call)|    382400|      8.20414|  2.14543e-05|  4.37%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:358 __call__
(call)|     76480|      11.4575|   0.00014981|  6.10%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:30 <dictcomp>
    31|         0|            0|            0|  0.00%|
    32|         1|            0|            0|  0.00%|    def get_base_damages_dict(self):
    33|         0|            0|            0|  0.00%|        # Reorder from STRENGTH/INTELLIGENCE/LUCK/AGILITY/NEUTRAL to NEUTRAL/STRENGTH/INTELLIGENCE/LUCK/AGILITY
    34|         0|            0|            0|  0.00%|        return {Characteristics(str(k - 1) if k > 0 else '4'): self.base_damages[k] for k in range(5)}
    35|         0|            0|            0|  0.00%|
    36|    382401|     0.593531|  1.55212e-06|  0.32%|    def get_base_damage(self, characteristic: Characteristics):
    37|    382400|      3.93818|  1.02986e-05|  2.10%|        return self.base_damages[int(characteristic.value) if characteristic.value != '4' else 0]
(call)|    688320|      11.0816|  1.60995e-05|  5.90%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\types.py:171 __get__
    38|         0|            0|            0|  0.00%|
    39|         1|            0|            0|  0.00%|    def get_total_stats(self, stats: Dict[str, Stats]) -> Stats:
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    40|         0|            0|            0|  0.00%|        for stats_short_name in self.stats:
    41|         0|            0|            0|  0.00%|            if not stats_short_name in stats:
    42|         0|            0|            0|  0.00%|                raise KeyError(f"Stats page '{stats_short_name}' does not exist.")
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|        if len(self.stats) == 0:
    45|         0|            0|            0|  0.00%|            return Stats()
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|        return sum(stats[stats_short_name] for stats_short_name in self.stats)
    48|         0|            0|            0|  0.00%|
    49|         1|            0|            0|  0.00%|    def add_base_damages(self, base_damages: Dict[Characteristics, int]):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    50|         0|            0|            0|  0.00%|        for k, characteristic in enumerate(Characteristics):
    51|         0|            0|            0|  0.00%|            self.base_damages[k + 1 if k < 4 else 0] += base_damages[characteristic]
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|     57361|     0.140304|  2.44599e-06|  0.07%|    def __add__(self, other: Union['DamageParameters', int]):
(call)|         1|  0.000998497|  0.000998497|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    55|         0|            0|            0|  0.00%|        """Perform an addition of the 'addable' type : vulnerability and base damages."""
    56|         0|            0|            0|  0.00%|
    57|     57360|      0.17132|  2.98675e-06|  0.09%|        if isinstance(other, int):  # Useful when doing stats + sum([]) - No matter the integer, return the stats
    58|         0|            0|            0|  0.00%|            return DamageParameters.from_existing(self)
    59|     57360|     0.139093|  2.42491e-06|  0.07%|        elif not isinstance(other, DamageParameters):
    60|         0|            0|            0|  0.00%|            raise TypeError(f"unsupported operand type(s) for +: 'DamageParameters' and '{type(other)}'.")
    61|         0|            0|            0|  0.00%|
    62|     57360|     0.423381|  7.38112e-06|  0.23%|        result = DamageParameters.from_existing(self)
(call)|     57360|      5.79596|  0.000101045|  3.08%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:190 from_existing
    63|         0|            0|            0|  0.00%|
    64|     57360|     0.153898|  2.68302e-06|  0.08%|        result.vulnerability += other.vulnerability
    65|    344160|     0.814757|  2.36738e-06|  0.43%|        for k in range(5):
    66|    286800|     0.687652|  2.39767e-06|  0.37%|            result.base_damages[k] += other.base_damages[k]
    67|    286800|     0.714528|  2.49138e-06|  0.38%|            result.resistances[k] += other.resistances[k]
    68|         0|            0|            0|  0.00%|
    69|     57360|     0.129908|  2.26479e-06|  0.07%|        return result
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|         1|            0|            0|  0.00%|    def to_string(self):
    73|         0|            0|            0|  0.00%|        return f'-s {" ".join(self.stats)} -pa {self.pa} -pomin {self.get_min_po()} -pomax {self.get_max_po()} -t {self.type} -r {" ".join(map(str, self.resistances))} -d {self.distance} -v {self.vulnerability} -name {self.full_name} -bdmg {" ".join(map(str, self.base_damages))}'
    74|         0|            0|            0|  0.00%|
    75|         1|            0|            0|  0.00%|    def to_compact_string(self):
    76|         0|            0|            0|  0.00%|        return f'-r {" ".join(map(str, self.resistances))} -v {self.vulnerability} -bdmg {" ".join(map(str, self.base_damages))}'
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|
    79|         2|            0|            0|  0.00%|    def _assert_correct_parameters(self):
    80|         1|            0|            0|  0.00%|        if self.pa < 1:
    81|         0|            0|            0|  0.00%|            raise ValueError(f"PA should be a positive integer ({self.pa} given instead).")
    82|         1|            0|            0|  0.00%|        if self.get_min_po() < 0:
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:22 get_min_po
    83|         0|            0|            0|  0.00%|            raise ValueError(f"Minimum PO should be non negative ({self.get_min_po()} given instead).")
    84|         1|            0|            0|  0.00%|        if self.get_min_po() > self.get_max_po():
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:22 get_min_po
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:25 get_max_po
    85|         0|            0|            0|  0.00%|            raise ValueError(f"Minimum PO should be less than or equal to maximum PO ({self.get_min_po()} and {self.get_max_po()} given instead).")
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|
    88|         2|            0|            0|  0.00%|    def copy(self):
    89|         1|            0|            0|  0.00%|        return DamageParameters.from_existing(self)
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:190 from_existing
    90|         0|            0|            0|  0.00%|
    91|         0|            0|            0|  0.00%|
    92|         2|            0|            0|  0.00%|    @classmethod
    93|         1|            0|            0|  0.00%|    def _check_parameter(cls, parameter: List[str], count: int = -1, argument_type=None, literals: List[str]=None):
(call)|         2|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    94|         1|            0|            0|  0.00%|        if count > 0: # If count if < 0, it means no constraints
    95|         1|            0|            0|  0.00%|            if len(parameter) - 1 < count:
    96|         0|            0|            0|  0.00%|                raise ValueError(f"Too few arguments provided to command '{parameter[0]}' ({len(parameter) - 1} given, {count} expected).")
    97|         1|            0|            0|  0.00%|            elif len(parameter) - 1 > count:
    98|         0|            0|            0|  0.00%|                raise ValueError(f"Too many arguments provided to command '{parameter[0]}' ({len(parameter) - 1} given, {count} expected).")
    99|         0|            0|            0|  0.00%|
   100|         1|            0|            0|  0.00%|        if argument_type is None and literals is None: # No constraints on what the arguments can be
   101|         0|            0|            0|  0.00%|            return
   102|         0|            0|            0|  0.00%|
   103|         2|            0|            0|  0.00%|        for k, argument in enumerate(parameter[1:]):
   104|         1|            0|            0|  0.00%|            if argument_type == int:
   105|         1|            0|            0|  0.00%|                if re.match("^[+-]?\d+$", argument) is None: # Check argument is an integer, maybe preceded by - or +
(call)|         1|   0.00299215|   0.00299215|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\re.py:188 match
   106|         0|            0|            0|  0.00%|                    raise ValueError(f"Argument {k + 1} to command '{parameter[0]}' should be an integer ('{argument}' given instead).")
   107|         0|            0|            0|  0.00%|            elif argument_type is None:
   108|         0|            0|            0|  0.00%|                if not argument in literals:
   109|         0|            0|            0|  0.00%|                    raise ValueError(f"Argument {k + 1} to command '{parameter[0]}' should be one of {literals} ('{argument}' given instead).")
   110|         0|            0|            0|  0.00%|
   111|         2|            0|            0|  0.00%|    @classmethod
   112|         1|            0|            0|  0.00%|    def from_string(cls, string: str, default_parameters: 'DamageParameters' = None):
   113|         1|            0|            0|  0.00%|        if default_parameters is None:
   114|         1|            0|            0|  0.00%|            default_parameters = DamageParameters()
(call)|         1|   0.00099659|   0.00099659|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:2 __init__
   115|         0|            0|            0|  0.00%|
   116|         1|            0|            0|  0.00%|        string = string.strip()
   117|         1|            0|            0|  0.00%|        string = re.sub(r'-+', '-', string) # Replace repeating substring of - into only one
(call)|         1|   0.00099802|   0.00099802|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\re.py:203 sub
   118|         0|            0|            0|  0.00%|
   119|         1|            0|            0|  0.00%|        if string == '':
   120|         0|            0|            0|  0.00%|            # No command, so just return the default parameters
   121|         0|            0|            0|  0.00%|            return default_parameters.copy()
   122|         0|            0|            0|  0.00%|
   123|         1|            0|            0|  0.00%|        if not string.startswith('-'):
   124|         0|            0|            0|  0.00%|            raise ValueError(f"Incorrect string to be parsed as parameters : does not start with a command ('{string}').")
   125|         0|            0|            0|  0.00%|
   126|         1|            0|            0|  0.00%|        arguments = string.split(' ')
   127|         1|            0|            0|  0.00%|        parameters: List[List[str]] = list()
   128|         0|            0|            0|  0.00%|
   129|         3|            0|            0|  0.00%|        for argument in arguments:
   130|         2|            0|            0|  0.00%|            if re.match(r'^-[^\d]', argument.lower()) is not None: # Starts with a - but is not a negative number
(call)|         2|   0.00199389|  0.000996947|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\re.py:188 match
   131|         1|            0|            0|  0.00%|                parameters.append([argument.lower()])
   132|         0|            0|            0|  0.00%|            else:
   133|         1|            0|            0|  0.00%|                parameters[-1].append(argument)
   134|         0|            0|            0|  0.00%|
   135|         1|            0|            0|  0.00%|        damage_parameters = default_parameters.copy()
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:88 copy
   136|         0|            0|            0|  0.00%|
   137|         2|            0|            0|  0.00%|        for parameter in parameters:
   138|         1|            0|            0|  0.00%|            command = parameter[0]
   139|         1|            0|            0|  0.00%|            if command in ('-s', '-stats'):
   140|         0|            0|            0|  0.00%|                damage_parameters.stats = [argument for argument in parameter[1:] if argument != ''] # Copy the list to avoid reference issues
   141|         0|            0|            0|  0.00%|
   142|         1|            0|            0|  0.00%|            elif command == '-pa':
   143|         1|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, argument_type=int)
(call)|         1|   0.00299215|   0.00299215|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:92 _check_parameter
   144|         1|            0|            0|  0.00%|                damage_parameters.pa = int(parameter[1])
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|            elif command == '-po':
   147|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, argument_type=int)
   148|         0|            0|            0|  0.00%|                po = int(parameter[1])
   149|         0|            0|            0|  0.00%|                damage_parameters.po = [po, po]
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|            elif command in ('-pomin', '-minpo'):
   152|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, argument_type=int)
   153|         0|            0|            0|  0.00%|                damage_parameters.po = [int(parameter[1]), damage_parameters.get_max_po()]
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|            elif command in ('-pomax', '-maxpo'):
   156|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, argument_type=int)
   157|         0|            0|            0|  0.00%|                damage_parameters.po = [damage_parameters.get_min_po(), int(parameter[1])]
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|            elif command in ('-t', '-type'):
   160|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, literals=['mono', 'multi', 'versa'])
   161|         0|            0|            0|  0.00%|                damage_parameters.type = parameter[1]
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|            elif command in ('-r', '-res', '-resistances'):
   164|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 5, argument_type=int)
   165|         0|            0|            0|  0.00%|                damage_parameters.resistances = [int(parameter[i]) for i in range(1, 5 + 1)]
   166|         0|            0|            0|  0.00%|                pass
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|            elif command in ('-d', '-distance'):
   169|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, literals=['melee', 'range'])
   170|         0|            0|            0|  0.00%|                damage_parameters.distance = parameter[1]
   171|         0|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|            elif command in ('-v', '-vulne', '-vulnerability'):
   173|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 1, argument_type=int)
   174|         0|            0|            0|  0.00%|                damage_parameters.vulnerability = int(parameter[1])
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|            elif command in ('-bdmg', '-bdamages', '-base-damages'):
   177|         0|            0|            0|  0.00%|                cls._check_parameter(parameter, 5, argument_type=int)
   178|         0|            0|            0|  0.00%|                damage_parameters.base_damages = [int(parameter[i]) for i in range(1, 5 + 1)]
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|            elif command in ('-state', '-states'):
   181|         0|            0|            0|  0.00%|                damage_parameters.starting_states = {argument for argument in parameter[1:] if argument != ''}
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|            elif command in ('-name',):
   184|         0|            0|            0|  0.00%|                damage_parameters.full_name = ' '.join(parameter[1:])
   185|         0|            0|            0|  0.00%|
   186|         1|            0|            0|  0.00%|        damage_parameters._assert_correct_parameters()
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:79 _assert_correct_parameters
   187|         0|            0|            0|  0.00%|
   188|         1|            0|            0|  0.00%|        return damage_parameters
   189|         0|            0|            0|  0.00%|
   190|     76482|     0.137778|  1.80145e-06|  0.07%|    @classmethod
   191|         1|            0|            0|  0.00%|    def from_existing(cls, default_parameters: 'DamageParameters'):
   192|         0|            0|            0|  0.00%|        # Using [::] is faster than a list comprehension
   193|     76481|      0.67016|  8.76244e-06|  0.36%|        parameters = DamageParameters()
(call)|     76481|        5.097|   6.6644e-05|  2.71%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:2 __init__
   194|         0|            0|            0|  0.00%|
   195|     76481|      0.17959|  2.34816e-06|  0.10%|        parameters.full_name = default_parameters.full_name
   196|     76481|     0.177602|  2.32218e-06|  0.09%|        parameters.stats = default_parameters.stats[::]
   197|     76481|     0.186503|  2.43855e-06|  0.10%|        parameters.pa = default_parameters.pa
   198|     76481|     0.176088|  2.30238e-06|  0.09%|        parameters.po = default_parameters.po[::]
   199|     76481|     0.179581|  2.34805e-06|  0.10%|        parameters.type = default_parameters.type
   200|     76481|     0.209705|  2.74192e-06|  0.11%|        parameters.resistances = default_parameters.resistances[::]
   201|     76481|     0.189577|  2.47874e-06|  0.10%|        parameters.distance = default_parameters.distance
   202|     76481|     0.188411|  2.46349e-06|  0.10%|        parameters.vulnerability = default_parameters.vulnerability
   203|     76481|     0.195201|  2.55229e-06|  0.10%|        parameters.base_damages = default_parameters.base_damages[::]
   204|         0|            0|            0|  0.00%|
   205|     76481|      0.18075|  2.36334e-06|  0.10%|        return parameters
File: G:\Autres\DofusDamageCalculator\spell.py
File duration: 21.5302s (11.46%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|        29|            0|            0|  0.00%|from dataclasses import dataclass, field, replace
     2|     38257|      0.10688|  2.79374e-06|  0.06%|import json
     3|     38248|     0.311492|  8.14402e-06|  0.17%|import os
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:43 <lambda>
(call)|     38240|       3.2365|  8.46366e-05|  1.72%|# G:\Autres\DofusDamageCalculator\spell.py:15 <lambda>
     4|     38251|     0.258158|  6.74906e-06|  0.14%|import re
(call)|     38240|     0.154747|  4.04674e-06|  0.08%|# G:\Autres\DofusDamageCalculator\spell.py:16 <lambda>
     5|     38248|     0.243013|  6.35362e-06|  0.13%|from typing import Dict, List, Set, Tuple
(call)|     38240|      11.9466|  0.000312412|  6.36%|# G:\Autres\DofusDamageCalculator\spell.py:17 <lambda>
     6|     38251|     0.253866|  6.63684e-06|  0.14%|from uuid import uuid1
(call)|     38240|       3.0449|   7.9626e-05|  1.62%|# G:\Autres\DofusDamageCalculator\spell.py:18 <lambda>
     7|     38247|     0.258331|  6.75429e-06|  0.14%|
(call)|     38240|     0.152905|  3.99856e-06|  0.08%|# G:\Autres\DofusDamageCalculator\spell.py:19 <lambda>
     8|     38248|    0.0887573|  2.32057e-06|  0.05%|from damages import compute_damage
(call)|         1|   0.00202656|   0.00202656|  0.00%|# <frozen importlib._bootstrap>:1002 _find_and_load
     9|     38248|    0.0937779|  2.45184e-06|  0.05%|from damage_parameters import DamageParameters
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:49 <lambda>
    10|         3|            0|            0|  0.00%|from stats import Characteristics, Damages, Stats
    11|         0|            0|            0|  0.00%|
    12|         1|            0|            0|  0.00%|
    13|         3|            0|            0|  0.00%|@dataclass
    14|         1|  0.000996351|  0.000996351|  0.00%|class SpellOutput:
(call)|         1|  0.000997782|  0.000997782|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:13 SpellOutput
(call)|         5|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:281 __set_name__
(call)|         1|   0.00598741|   0.00598741|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:998 dataclass
    15|    344161|      2.13681|  6.20874e-06|  1.14%|    damages_by_characteristic: Dict[Characteristics, Dict[str, int]] = field(default_factory=lambda: {characteristic: {'min': 0, 'max': 0, 'crit_min': 0, 'crit_max': 0} for characteristic in Characteristics})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         2|  0.000997782|  0.000498891|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
(call)|     38240|     0.198997|   5.2039e-06|  0.11%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    229440|     0.900701|  3.92565e-06|  0.48%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
(call)|     38240|      2.50683|  6.55551e-05|  1.33%|# G:\Autres\DofusDamageCalculator\spell.py:15 <dictcomp>
    16|     76481|     0.154747|  2.02334e-06|  0.08%|    damages: Dict[str, int] = field(default_factory=lambda: {'min': 0, 'max': 0, 'crit_min': 0, 'crit_max': 0})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    17|     76481|     0.330895|   4.3265e-06|  0.18%|    stats: Dict[str, Stats] = field(default_factory=lambda: {'__all__': Stats()})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
(call)|     38240|      11.6157|  0.000303759|  6.18%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
    18|     76481|     0.376805|  4.92678e-06|  0.20%|    parameters: Dict[str, DamageParameters] = field(default_factory=lambda: {'__all__': DamageParameters()})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
(call)|     38240|      2.66809|  6.97723e-05|  1.42%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:2 __init__
    19|     76481|     0.152905|  1.99925e-06|  0.08%|    states: Set[str] = field(default_factory=lambda: set())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    20|         1|            0|            0|  0.00%|    average_damage: float = 0.0
    21|         1|            0|            0|  0.00%|    average_damage_crit: float = 0.0
    22|         0|            0|            0|  0.00%|
    23|         1|            0|            0|  0.00%|    def update_stats(self, new_stats: Dict[str, Stats]):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    24|         0|            0|            0|  0.00%|        for name in new_stats:
    25|         0|            0|            0|  0.00%|            self.stats[name] = self.stats.get(name, Stats()) + new_stats[name]
    26|         0|            0|            0|  0.00%|
    27|         1|            0|            0|  0.00%|    def update_parameters(self, new_parameters: Dict[str, DamageParameters]):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    28|         0|            0|            0|  0.00%|        for name in new_parameters:
    29|         0|            0|            0|  0.00%|            self.parameters[name] = self.parameters.get(name, DamageParameters()) + new_parameters[name]
    30|         0|            0|            0|  0.00%|
    31|     19121|    0.0438478|  2.29318e-06|  0.02%|    def update_damages_from_existing(self, other: 'SpellOutput'):
    32|     95600|     0.220222|  2.30358e-06|  0.12%|        for field in ('min', 'max', 'crit_min', 'crit_max'):
    33|    458880|      3.21528|  7.00679e-06|  1.71%|            for characteristic in Characteristics:
(call)|     76480|     0.402618|  5.26435e-06|  0.21%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    458880|      1.86946|  4.07397e-06|  0.99%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
    34|    382400|     0.954155|  2.49517e-06|  0.51%|                self.damages_by_characteristic[characteristic][field] = other.damages_by_characteristic[characteristic][field]
    35|     76480|      0.19477|  2.54668e-06|  0.10%|            self.damages[field] = other.damages[field]
    36|         0|            0|            0|  0.00%|
    37|     19120|    0.0449212|  2.34943e-06|  0.02%|        self.average_damage = other.average_damage
    38|     19120|    0.0660248|  3.45318e-06|  0.04%|        self.average_damage_crit = other.average_damage_crit
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         3|            0|            0|  0.00%|@dataclass
    42|         1|            0|            0|  0.00%|class SpellParameters:
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:41 SpellParameters
(call)|         2|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:281 __set_name__
(call)|         1|   0.00601554|   0.00601554|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:998 dataclass
    43|        15|            0|            0|  0.00%|    base_damages: Dict[Characteristics, Dict[str, int]] = field(default_factory=lambda: {})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         2|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    44|         1|            0|            0|  0.00%|    pa: int = 1
    45|         1|            0|            0|  0.00%|    crit_chance: float = 0.0
    46|         1|            0|            0|  0.00%|    uses_per_target: int = -1
    47|         1|            0|            0|  0.00%|    uses_per_turn: int = -1
    48|         1|            0|            0|  0.00%|    is_weapon: bool = False
    49|        15|            0|            0|  0.00%|    po: Tuple[int, int] = field(default_factory=lambda: (0, 1024))
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         8|            0|            0|  0.00%|    def get_max_uses_single_target(self, max_used_pa: int) -> int:
    53|         7|            0|            0|  0.00%|        if self.uses_per_target == -1:
    54|         6|            0|            0|  0.00%|            return max_used_pa // self.pa
    55|         0|            0|            0|  0.00%|        else:
    56|         1|            0|            0|  0.00%|            return min(max_used_pa // self.pa, self.uses_per_target)
    57|         0|            0|            0|  0.00%|
    58|         1|            0|            0|  0.00%|    def get_max_uses_multiple_targets(self, max_used_pa: int) -> int:
    59|         0|            0|            0|  0.00%|        if self.uses_per_turn == -1:
    60|         0|            0|            0|  0.00%|            return max_used_pa // self.pa
    61|         0|            0|            0|  0.00%|        else:
    62|         0|            0|            0|  0.00%|            return min(max_used_pa // self.pa, self.uses_per_turn)
    63|         0|            0|            0|  0.00%|
    64|         3|            0|            0|  0.00%|@dataclass
    65|         1|            0|            0|  0.00%|class SpellBuff:
(call)|         1|  0.000997066|  0.000997066|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:64 SpellBuff
(call)|         6|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:281 __set_name__
(call)|         1|   0.00698161|   0.00698161|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:998 dataclass
    66|         1|            0|            0|  0.00%|    trigger_states: Set[str] = field(default_factory=lambda: set())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    67|         1|            0|            0|  0.00%|    base_damages: Dict[Characteristics, int] = field(default_factory=lambda: {characteristic: 0 for characteristic in Characteristics})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    68|         1|            0|            0|  0.00%|    stats: Dict[str, Stats] = field(default_factory=lambda: {'__all__': Stats()})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    69|         1|            0|            0|  0.00%|    damage_parameters: Dict[str, DamageParameters] = field(default_factory=lambda: {'__all__': DamageParameters()})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    70|         0|            0|            0|  0.00%|
    71|         1|            0|            0|  0.00%|    new_output_states: Set[str] = field(default_factory=lambda: set())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    72|         1|            0|            0|  0.00%|    removed_output_states: Set[str] = field(default_factory=lambda: set())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    73|         0|            0|            0|  0.00%|
    74|         1|            0|            0|  0.00%|    has_stats: bool = False
    75|         1|            0|            0|  0.00%|    has_parameters: bool = False
    76|         0|            0|            0|  0.00%|
    77|         1|            0|            0|  0.00%|    is_huppermage_states: bool = False
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         1|            0|            0|  0.00%|    def add_trigger_state(self, state: str):
    81|         0|            0|            0|  0.00%|        self.trigger_states.add(state)
    82|         0|            0|            0|  0.00%|
    83|         1|            0|            0|  0.00%|    def add_trigger_states(self, states: Set[str]):
(call)|         1|  0.000997066|  0.000997066|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    84|         0|            0|            0|  0.00%|        self.trigger_states.update(states)
    85|         0|            0|            0|  0.00%|
    86|         1|            0|            0|  0.00%|    def remove_trigger_state(self, state: str):
    87|         0|            0|            0|  0.00%|        self.trigger_states -= {state,}
    88|         0|            0|            0|  0.00%|
    89|         1|            0|            0|  0.00%|    def set_base_damages(self, characteristic: Characteristics, base_damages: int):
    90|         0|            0|            0|  0.00%|        self.base_damages[characteristic] = base_damages
    91|         0|            0|            0|  0.00%|
    92|         1|            0|            0|  0.00%|    def add_stats(self, stats: Stats, spell: str = '__all__'):
    93|         0|            0|            0|  0.00%|        self.has_stats = True
    94|         0|            0|            0|  0.00%|        self.stats[spell] = self.stats.get(spell, Stats()) + stats
    95|         0|            0|            0|  0.00%|
    96|         1|            0|            0|  0.00%|    def add_damage_parameters(self, damage_parameters: DamageParameters, spell: str = '__all__'):
    97|         0|            0|            0|  0.00%|        self.has_parameters = True
    98|         0|            0|            0|  0.00%|        self.damage_parameters[spell] = self.damage_parameters.get(spell, DamageParameters()) + damage_parameters
    99|         0|            0|            0|  0.00%|
   100|         1|            0|            0|  0.00%|    def add_new_output_state(self, state: str):
   101|         0|            0|            0|  0.00%|        self.new_output_states.add(state)
   102|         0|            0|            0|  0.00%|
   103|         1|            0|            0|  0.00%|    def add_new_output_states(self, states: Set[str]):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
   104|         0|            0|            0|  0.00%|        self.new_output_states.update(states)
   105|         0|            0|            0|  0.00%|
   106|         1|            0|            0|  0.00%|    def remove_new_output_state(self, state: str):
   107|         0|            0|            0|  0.00%|        self.new_output_states -= {state,}
   108|         0|            0|            0|  0.00%|
   109|         1|            0|            0|  0.00%|    def add_removed_output_state(self, state: str):
   110|         0|            0|            0|  0.00%|        self.removed_output_states.add(state)
   111|         0|            0|            0|  0.00%|
   112|         1|            0|            0|  0.00%|    def add_removed_output_states(self, states: Set[str]):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
   113|         0|            0|            0|  0.00%|        self.removed_output_states.update(states)
   114|         0|            0|            0|  0.00%|
   115|         1|            0|            0|  0.00%|    def remove_removed_output_state(self, state: str):
   116|         0|            0|            0|  0.00%|        self.removed_output_states -= {state,}
   117|         0|            0|            0|  0.00%|
   118|         1|            0|            0|  0.00%|    def trigger(self, states: Set[str]) -> bool:
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
   119|         0|            0|            0|  0.00%|        return states.issuperset(self.trigger_states)
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         1|            0|            0|  0.00%|    def to_compact_string(self, only_states=False):
   123|         0|            0|            0|  0.00%|        if self.is_huppermage_states:
   124|         0|            0|            0|  0.00%|            return f'Huppermage states : ({", ".join(sorted(self.new_output_states))})'
   125|         0|            0|            0|  0.00%|        else:
   126|         0|            0|            0|  0.00%|            return f'({", ".join(sorted(self.trigger_states))}) -> ({", ".join(sorted((self.trigger_states - self.removed_output_states) | self.new_output_states))}){"(Stats buff)" if self.has_stats and not only_states else ""}{"(Parameters buff)" if self.has_parameters and not only_states else ""}'
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|
   129|         1|            0|            0|  0.00%|    def to_dict(self) -> Dict:
   130|         0|            0|            0|  0.00%|        return {
   131|         0|            0|            0|  0.00%|            'trigger_states': list(self.trigger_states),
   132|         0|            0|            0|  0.00%|            'base_damages': self.base_damages,
   133|         0|            0|            0|  0.00%|            'stats': {spell: stats.to_dict() for spell, stats in self.stats.items()},
   134|         0|            0|            0|  0.00%|            'damage_parameters': {spell: damage_parameters.to_string() for spell, damage_parameters in self.damage_parameters.items()},
   135|         0|            0|            0|  0.00%|            'new_output_states': list(self.new_output_states),
   136|         0|            0|            0|  0.00%|            'removed_output_states': list(self.removed_output_states),
   137|         0|            0|            0|  0.00%|            'is_huppermage_states': self.is_huppermage_states,
   138|         0|            0|            0|  0.00%|            'has_stats': self.has_stats,
   139|         0|            0|            0|  0.00%|            'has_parameters': self.has_parameters
   140|         0|            0|            0|  0.00%|        }
   141|         0|            0|            0|  0.00%|
   142|         1|            0|            0|  0.00%|    @classmethod
   143|         1|            0|            0|  0.00%|    def from_dict(cls, data) -> 'SpellBuff':
   144|         0|            0|            0|  0.00%|        for field in ('trigger_states', 'base_damages', 'stats', 'damage_parameters', 'new_output_states', 'removed_output_states', 'is_huppermage_states', 'has_stats', 'has_parameters'):
   145|         0|            0|            0|  0.00%|            if not field in data:
   146|         0|            0|            0|  0.00%|                raise KeyError(f"JSON string does not contain a '{field}' field (SpellBuff.from_dict).")
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|        spell_buff = SpellBuff()
   149|         0|            0|            0|  0.00%|
   150|         0|            0|            0|  0.00%|        for state in data['trigger_states']:
   151|         0|            0|            0|  0.00%|            spell_buff.add_trigger_state(state)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|        for characteristic in Characteristics:
   154|         0|            0|            0|  0.00%|            spell_buff.set_base_damages(characteristic, data['base_damages'][characteristic])
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|        for spell in data['stats']:
   157|         0|            0|            0|  0.00%|            spell_buff.add_stats(Stats.from_dict(data['stats'][spell]), spell=spell)
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|        for spell in data['damage_parameters']:
   160|         0|            0|            0|  0.00%|            spell_buff.add_damage_parameters(DamageParameters.from_string(data['damage_parameters'][spell]), spell=spell)
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|        for state in data['new_output_states']:
   163|         0|            0|            0|  0.00%|            spell_buff.add_new_output_state(state)
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|        for state in data['removed_output_states']:
   166|         0|            0|            0|  0.00%|            spell_buff.add_removed_output_state(state)
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|        spell_buff.is_huppermage_states = data['is_huppermage_states']
   169|         0|            0|            0|  0.00%|        spell_buff.has_stats = data['has_stats']
   170|         0|            0|            0|  0.00%|        spell_buff.has_parameters = data['has_parameters']
   171|         0|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|        return spell_buff
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|
   175|         3|            0|            0|  0.00%|class Spell():
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:175 Spell
   176|         8|            0|            0|  0.00%|    def __init__(self, from_scratch=True) -> None:
   177|         7|            0|            0|  0.00%|        self.parameters = SpellParameters()
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:2 __init__
   178|         7|            0|            0|  0.00%|        self.buffs: List[SpellBuff] = list()
   179|         7|            0|            0|  0.00%|        self.name = ''
   180|         7|            0|            0|  0.00%|        self.short_name = ''
   181|         0|            0|            0|  0.00%|
   182|         7|            0|            0|  0.00%|        if from_scratch:
   183|         0|            0|            0|  0.00%|            for characteristic in Characteristics:
   184|         0|            0|            0|  0.00%|                self.parameters.base_damages[characteristic] = {'min': 0, 'max': 0, 'crit_min': 0, 'crit_max': 0}
   185|         0|            0|            0|  0.00%|            self.set_short_name('')
   186|         0|            0|            0|  0.00%|
   187|         0|            0|            0|  0.00%|
   188|     19121|     0.069021|   3.6097e-06|  0.04%|    def get_detailed_damages(self, stats: Stats, parameters: DamageParameters):
   189|     19120|      0.17306|  9.05126e-06|  0.09%|        spell_output = SpellOutput()
(call)|     19120|      9.99282|  0.000522637|  5.32%|# G:\Autres\DofusDamageCalculator\spell.py:2 __init__
   190|         0|            0|            0|  0.00%|
   191|    114720|     0.939318|  8.18792e-06|  0.50%|        for characteristic in Characteristics:
(call)|     19120|     0.115363|  6.03364e-06|  0.06%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|    114720|     0.528981|  4.61106e-06|  0.28%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   192|     95600|     0.810784|  8.48101e-06|  0.43%|            min_damage = compute_damage(self.parameters.base_damages[characteristic]['min'], stats, characteristic, is_weapon=self.parameters.is_weapon, parameters=parameters)
(call)|     95600|      12.0878|  0.000126441|  6.43%|# G:\Autres\DofusDamageCalculator\damages.py:5 compute_damage
   193|     95600|       0.8499|  8.89017e-06|  0.45%|            max_damage = compute_damage(self.parameters.base_damages[characteristic]['max'], stats, characteristic, is_weapon=self.parameters.is_weapon, parameters=parameters)
(call)|     95600|      11.5445|  0.000120758|  6.14%|# G:\Autres\DofusDamageCalculator\damages.py:5 compute_damage
   194|     95600|     0.314029|  3.28482e-06|  0.17%|            spell_output.average_damage += (min_damage + max_damage) / 2
   195|         0|            0|            0|  0.00%|
   196|     95600|     0.821479|  8.59287e-06|  0.44%|            min_damage_crit = compute_damage(self.parameters.base_damages[characteristic]['crit_min'], stats, characteristic, is_weapon=self.parameters.is_weapon, is_crit=True, parameters=parameters)
(call)|     95600|      11.9595|  0.000125099|  6.36%|# G:\Autres\DofusDamageCalculator\damages.py:5 compute_damage
   197|     95600|     0.850499|  8.89643e-06|  0.45%|            max_damage_crit = compute_damage(self.parameters.base_damages[characteristic]['crit_max'], stats, characteristic, is_weapon=self.parameters.is_weapon, is_crit=True, parameters=parameters)
(call)|     95600|      11.8724|  0.000124188|  6.32%|# G:\Autres\DofusDamageCalculator\damages.py:5 compute_damage
   198|     95600|     0.308866|  3.23081e-06|  0.16%|            spell_output.average_damage_crit += (min_damage_crit + max_damage_crit) / 2
   199|         0|            0|            0|  0.00%|
   200|     95600|     0.300505|  3.14335e-06|  0.16%|            spell_output.damages_by_characteristic[characteristic] = {
   201|     95600|     0.246441|  2.57783e-06|  0.13%|                'min': min_damage,
   202|     95600|     0.283644|  2.96699e-06|  0.15%|                'max': max_damage,
   203|     95600|     0.225662|  2.36048e-06|  0.12%|                'crit_min': min_damage_crit,
   204|     95600|     0.264261|  2.76424e-06|  0.14%|                'crit_max': max_damage_crit
   205|         0|            0|            0|  0.00%|            }
   206|     95600|     0.270081|  2.82512e-06|  0.14%|        for field in ('min', 'max', 'crit_min', 'crit_max'):
   207|    994240|       4.0513|  4.07477e-06|  2.16%|            spell_output.damages[field] = sum(spell_output.damages_by_characteristic[characteristic][field] for characteristic in spell_output.damages_by_characteristic)
(call)|    458880|      1.78513|  3.89019e-06|  0.95%|# G:\Autres\DofusDamageCalculator\spell.py:207 <genexpr>
   208|         0|            0|            0|  0.00%|
   209|     19120|    0.0428593|   2.2416e-06|  0.02%|        return spell_output
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         1|            0|            0|  0.00%|    def get_average_damages(self, stats: Stats, parameters: DamageParameters):
   213|         0|            0|            0|  0.00%|        spell_output = self.get_detailed_damages(stats, parameters)
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|        final_crit_chance = self.parameters.crit_chance + stats.bonus_crit_chance
   216|         0|            0|            0|  0.00%|        if final_crit_chance > 1.0:
   217|         0|            0|            0|  0.00%|            final_crit_chance = 1.0
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|        return (1 - final_crit_chance) * spell_output.average_damage + final_crit_chance * spell_output.average_damage_crit
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|         1|            0|            0|  0.00%|    def get_damages_and_buffs_with_states_single(self, stats: Stats, damage_parameters: DamageParameters) -> SpellOutput:
   223|         0|            0|            0|  0.00%|        return self.get_damages_and_buffs_with_states(stats, damage_parameters, damage_parameters.starting_states)
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|
   226|     19121|    0.0663249|   3.4687e-06|  0.04%|    def get_damages_and_buffs_with_states(self, stats: Stats, damage_parameters: DamageParameters, states: Set[str]) -> SpellOutput:
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
   227|         0|            0|            0|  0.00%|        # G�n�rer les buffs de ce sort li�s aux �tats ok
   228|         0|            0|            0|  0.00%|        # Retirer les �tats utilis�s et ajout�s les nouveaux ok
   229|         0|            0|            0|  0.00%|        # G�n�rer les buffs pour les sorts suivants
   230|         0|            0|            0|  0.00%|
   231|     19120|     0.220117|  1.15124e-05|  0.12%|        output = SpellOutput()
(call)|     19120|      10.1552|  0.000531128|  5.40%|# G:\Autres\DofusDamageCalculator\spell.py:2 __init__
   232|         0|            0|            0|  0.00%|
   233|     19120|     0.163925|  8.57348e-06|  0.09%|        computation_parameters = DamageParameters.from_existing(damage_parameters)
(call)|     19120|      1.97199|  0.000103137|  1.05%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:190 from_existing
   234|     19120|     0.175176|  9.16191e-06|  0.09%|        computation_stats = Stats.from_existing(stats)
(call)|     19120|      11.6253|  0.000608017|  6.19%|# G:\Autres\DofusDamageCalculator\stats.py:194 from_existing
   235|     19120|     0.073909|  3.86554e-06|  0.04%|        output.states.update(states)
   236|         0|            0|            0|  0.00%|
   237|     19120|    0.0792427|  4.14449e-06|  0.04%|        for buff in self.buffs:
   238|         0|            0|            0|  0.00%|            if buff.trigger(states):
   239|         0|            0|            0|  0.00%|                if buff.is_huppermage_states:
   240|         0|            0|            0|  0.00%|                    # Huppermage state is one of 'h:a', 'h:e', 'h:f', 'h:w' (respectively air, earth, fire and water)
   241|         0|            0|            0|  0.00%|                    for huppermage_state in sorted(buff.new_output_states):  # sorted() returns a list
   242|         0|            0|            0|  0.00%|                        huppermage_state = f'h:{huppermage_state[-1]}'  # State is of the form r"h:\w" or r"h:\d\w" but the eventual digit is not kept
   243|         0|            0|            0|  0.00%|                        current_huppermage_state = next((state for state in output.states if state.startswith('h:')), None)
   244|         0|            0|            0|  0.00%|                        if current_huppermage_state is None:
   245|         0|            0|            0|  0.00%|                            output.states.add(huppermage_state)
   246|         0|            0|            0|  0.00%|                        elif current_huppermage_state != huppermage_state: # If element has already been applied, do nothing
   247|         0|            0|            0|  0.00%|                            output.states -= {current_huppermage_state,}
   248|         0|            0|            0|  0.00%|                            # Concatenate the letter after the 'h:' in alphabetical order
   249|         0|            0|            0|  0.00%|                            if current_huppermage_state < huppermage_state:
   250|         0|            0|            0|  0.00%|                                combined = f'H:{current_huppermage_state[-1]}{huppermage_state[-1]}'
   251|         0|            0|            0|  0.00%|                            else:
   252|         0|            0|            0|  0.00%|                                combined = f'H:{huppermage_state[-1]}{current_huppermage_state[-1]}'
   253|         0|            0|            0|  0.00%|                            # If the combination has not been seen yet, add 50 power.
   254|         0|            0|            0|  0.00%|                            # If it is a fire/earth combination, also add 15% vulnerability
   255|         0|            0|            0|  0.00%|                            if not combined in output.states:
   256|         0|            0|            0|  0.00%|                                output.states.add(combined)
   257|         0|            0|            0|  0.00%|                                output.stats['__all__'].damages[Damages.POWER] += 50
   258|         0|            0|            0|  0.00%|                                if combined == 'H:ef':
   259|         0|            0|            0|  0.00%|                                    output.parameters['__all__'].vulnerability += 15
   260|         0|            0|            0|  0.00%|                else:
   261|         0|            0|            0|  0.00%|                    computation_parameters.add_base_damages(buff.base_damages)
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|                    if buff.has_stats:
   264|         0|            0|            0|  0.00%|                        output.update_stats(buff.stats)
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|                    if buff.has_parameters:
   267|         0|            0|            0|  0.00%|                        output.update_parameters(buff.damage_parameters)
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|                    output.states -= buff.removed_output_states
   270|         0|            0|            0|  0.00%|                    output.states.update(buff.new_output_states)
   271|         0|            0|            0|  0.00%|
   272|     19120|     0.181752|  9.50588e-06|  0.10%|        simple_output = self.get_detailed_damages(computation_stats, computation_parameters)
(call)|     19120|      68.9231|   0.00360477| 36.68%|# G:\Autres\DofusDamageCalculator\spell.py:188 get_detailed_damages
   273|     19120|     0.170332|  8.90859e-06|  0.09%|        output.update_damages_from_existing(simple_output)
(call)|     19120|       7.0113|    0.0003667|  3.73%|# G:\Autres\DofusDamageCalculator\spell.py:31 update_damages_from_existing
   274|         0|            0|            0|  0.00%|
   275|     19120|    0.0640745|  3.35118e-06|  0.03%|        return output
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         8|            0|            0|  0.00%|    def get_max_uses_single_target(self, max_used_pa):
   279|         7|            0|            0|  0.00%|        if not isinstance(max_used_pa, int):
   280|         0|            0|            0|  0.00%|            raise TypeError(f"Max used pa is not an int ('{max_used_pa}' of type '{type(max_used_pa)}' given instead).")
   281|         0|            0|            0|  0.00%|
   282|         7|            0|            0|  0.00%|        if max_used_pa < 0:
   283|         0|            0|            0|  0.00%|            raise ValueError(f"Max used pa should be non negative ('{max_used_pa}' given instead).")
   284|         0|            0|            0|  0.00%|
   285|         7|            0|            0|  0.00%|        return self.parameters.get_max_uses_single_target(max_used_pa)
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:52 get_max_uses_single_target
   286|         0|            0|            0|  0.00%|
   287|         1|            0|            0|  0.00%|    def get_max_uses_multiple_targets(self, max_used_pa):
   288|         0|            0|            0|  0.00%|        if not isinstance(max_used_pa, int):
   289|         0|            0|            0|  0.00%|            raise TypeError(f"Max used pa is not an int ('{max_used_pa}' of type '{type(max_used_pa)}' given instead).")
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|        if max_used_pa < 0:
   292|         0|            0|            0|  0.00%|            raise ValueError(f"Max used pa should be non negative ('{max_used_pa}' given instead).")
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|        return self.parameters.get_max_uses_multiple_targets(max_used_pa)
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|
   297|         8|            0|            0|  0.00%|    def can_reach_po(self, min_po, max_po):
   298|         7|            0|            0|  0.00%|        return not (self.get_min_po() > max_po or self.get_max_po() < min_po)
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:404 get_min_po
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:407 get_max_po
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|
   301|         1|            0|            0|  0.00%|    def to_dict(self):
   302|         0|            0|            0|  0.00%|        return {
   303|         0|            0|            0|  0.00%|            'base_damages': self.parameters.base_damages,
   304|         0|            0|            0|  0.00%|            'pa': self.parameters.pa,
   305|         0|            0|            0|  0.00%|            'crit_chance': self.parameters.crit_chance,
   306|         0|            0|            0|  0.00%|            'uses_per_target': self.parameters.uses_per_target,
   307|         0|            0|            0|  0.00%|            'uses_per_turn': self.parameters.uses_per_turn,
   308|         0|            0|            0|  0.00%|            'is_weapon': self.parameters.is_weapon,
   309|         0|            0|            0|  0.00%|            'name': self.name,
   310|         0|            0|            0|  0.00%|            'short_name': self.short_name,
   311|         0|            0|            0|  0.00%|            'po': list(self.parameters.po),
   312|         0|            0|            0|  0.00%|            'buffs': [buff.to_dict() for buff in self.buffs]
   313|         0|            0|            0|  0.00%|        }
   314|         0|            0|            0|  0.00%|
   315|         1|            0|            0|  0.00%|    def save_to_file(self, filepath):
   316|         0|            0|            0|  0.00%|        json_valid_data = self.to_dict()
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|        with open(filepath, 'w', encoding='utf-8') as fo:
   319|         0|            0|            0|  0.00%|            json.dump(json_valid_data, fo)
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|
   322|         1|            0|            0|  0.00%|    def add_buff(self, buff: SpellBuff):
   323|         0|            0|            0|  0.00%|        self.buffs.append(buff)
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|
   326|        30|            0|            0|  0.00%|    def get_pa(self):
   327|        29|            0|            0|  0.00%|        return self.parameters.pa
   328|         0|            0|            0|  0.00%|
   329|         8|            0|            0|  0.00%|    def set_pa(self, pa):
   330|         7|            0|            0|  0.00%|        if not isinstance(pa, int):
   331|         0|            0|            0|  0.00%|            raise TypeError(f"PA count is not an int ('{pa}' of type '{type(pa)}' given instead).")
   332|         7|            0|            0|  0.00%|        if pa <= 0:
   333|         0|            0|            0|  0.00%|            raise ValueError(f"PA count should be a positive int ('{pa}' given instead).")
   334|         0|            0|            0|  0.00%|
   335|         7|            0|            0|  0.00%|        self.parameters.pa = pa
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|
   338|         1|            0|            0|  0.00%|    def get_base_damages(self, characteristic: Characteristics):
   339|         0|            0|            0|  0.00%|        if not isinstance(characteristic, Characteristics):
   340|         0|            0|            0|  0.00%|            raise TypeError(f"'{characteristic} is not a valid characteristic.")
   341|         0|            0|            0|  0.00%|
   342|         0|            0|            0|  0.00%|        return self.parameters.base_damages[characteristic]
   343|         0|            0|            0|  0.00%|
   344|        36|            0|            0|  0.00%|    def set_base_damages(self, characteristic: Characteristics, base_damages: Dict[str, int]):
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
   345|        35|            0|            0|  0.00%|        if not isinstance(characteristic, Characteristics):
   346|         0|            0|            0|  0.00%|            raise TypeError(f"'{characteristic} is not a valid characteristic.")
   347|         0|            0|            0|  0.00%|
   348|        35|            0|            0|  0.00%|        if not isinstance(base_damages, dict):
   349|         0|            0|            0|  0.00%|            raise TypeError(f"base_damages is not a dict ('{base_damages}' of type '{type(base_damages)}' given instead).")
   350|         0|            0|            0|  0.00%|
   351|       175|            0|            0|  0.00%|        for field in ('min', 'max', 'crit_min', 'crit_max'):
   352|       140|   0.00102901|   7.3501e-06|  0.00%|            if not field in base_damages:
   353|         0|            0|            0|  0.00%|                raise KeyError(f"Field '{field}' missing in base_damages.")
   354|       140|            0|            0|  0.00%|            if not isinstance(base_damages[field], int):
   355|         0|            0|            0|  0.00%|                raise TypeError(f"Field '{field}' is not an int ('{base_damages[field]}' of type '{type(base_damages[field])}' given instead).")
   356|         0|            0|            0|  0.00%|
   357|        35|            0|            0|  0.00%|        self.parameters.base_damages[characteristic] = base_damages
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|
   360|         1|            0|            0|  0.00%|    def get_crit_chance(self):
   361|         0|            0|            0|  0.00%|        return self.parameters.crit_chance
   362|         0|            0|            0|  0.00%|
   363|         8|            0|            0|  0.00%|    def set_crit_chance(self, crit_chance):
   364|         7|            0|            0|  0.00%|        if not (isinstance(crit_chance, float) or isinstance(crit_chance, int)):
   365|         0|            0|            0|  0.00%|            raise TypeError(f"Crit chance is not a float ('{crit_chance}' of type '{type(crit_chance)}' given instead).")
   366|         0|            0|            0|  0.00%|
   367|         7|            0|            0|  0.00%|        if not (0.0 <= crit_chance <= 1.0):
   368|         0|            0|            0|  0.00%|            raise ValueError(f"Crit chance should be between 0 and 1 inclusive ('{crit_chance}' given instead).")
   369|         0|            0|            0|  0.00%|
   370|         7|            0|            0|  0.00%|        self.parameters.crit_chance = float(crit_chance)
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|
   373|         1|            0|            0|  0.00%|    def get_uses_per_target(self):
   374|         0|            0|            0|  0.00%|        return self.parameters.uses_per_target
   375|         0|            0|            0|  0.00%|
   376|         8|            0|            0|  0.00%|    def set_uses_per_target(self, uses_per_target):
   377|         7|            0|            0|  0.00%|        if not isinstance(uses_per_target, int):
   378|         0|            0|            0|  0.00%|            raise TypeError(f"Uses per target is not a int ('{uses_per_target}' of type '{type(uses_per_target)}' given instead).")
   379|         7|            0|            0|  0.00%|        if uses_per_target == 0 or uses_per_target < -1:
   380|         0|            0|            0|  0.00%|            raise ValueError(f"Uses per target should be -1 or a positive int ('{uses_per_target}' given instead).")
   381|         0|            0|            0|  0.00%|
   382|         7|            0|            0|  0.00%|        self.parameters.uses_per_target = uses_per_target
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         1|            0|            0|  0.00%|    def get_uses_per_turn(self):
   386|         0|            0|            0|  0.00%|        return self.parameters.uses_per_turn
   387|         0|            0|            0|  0.00%|
   388|         8|            0|            0|  0.00%|    def set_uses_per_turn(self, uses_per_turn):
   389|         7|            0|            0|  0.00%|        if not isinstance(uses_per_turn, int):
   390|         0|            0|            0|  0.00%|            raise TypeError(f"Uses per turn is not a int ('{uses_per_turn}' of type '{type(uses_per_turn)}' given instead).")
   391|         7|            0|            0|  0.00%|        if uses_per_turn == 0 or uses_per_turn < -1:
   392|         0|            0|            0|  0.00%|            raise ValueError(f"Uses per turn should be -1 or a positive int ('{uses_per_turn}' given instead).")
   393|         0|            0|            0|  0.00%|
   394|         7|            0|            0|  0.00%|        self.parameters.uses_per_turn = uses_per_turn
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|         8|            0|            0|  0.00%|    def set_weapon(self, is_weapon):
   398|         7|            0|            0|  0.00%|        if not (isinstance(is_weapon, bool) or (isinstance(is_weapon, int) and is_weapon in (0, 1))):
   399|         0|            0|            0|  0.00%|            raise TypeError(f"is_weapon is not a bool ('{is_weapon}' of type '{type(is_weapon)}' given instead).")
   400|         0|            0|            0|  0.00%|
   401|         7|  0.000966787|  0.000138112|  0.00%|        self.parameters.is_weapon = bool(is_weapon)
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|
   404|         8|            0|            0|  0.00%|    def get_min_po(self):
   405|         7|            0|            0|  0.00%|        return self.parameters.po[0]
   406|         0|            0|            0|  0.00%|
   407|         8|            0|            0|  0.00%|    def get_max_po(self):
   408|         7|            0|            0|  0.00%|        return self.parameters.po[1]
   409|         0|            0|            0|  0.00%|
   410|         8|            0|            0|  0.00%|    def set_po(self, min_po=None, max_po=None):
   411|         7|            0|            0|  0.00%|        if min_po is None:
   412|         0|            0|            0|  0.00%|            min_po = self.get_min_po()
   413|         0|            0|            0|  0.00%|
   414|         7|            0|            0|  0.00%|        if max_po is None:
   415|         0|            0|            0|  0.00%|            max_po = self.get_max_po()
   416|         0|            0|            0|  0.00%|
   417|         7|            0|            0|  0.00%|        if not (isinstance(min_po, int) and isinstance(max_po, int)):
   418|         0|            0|            0|  0.00%|            raise TypeError(f"Minimum PO or maximum PO is not an int or None ('{min_po}' and '{max_po}' of types '{type(min_po)}' and '{type(max_po)}' given instead).")
   419|         0|            0|            0|  0.00%|
   420|         7|            0|            0|  0.00%|        if min_po < 0 or max_po < 0 or max_po < min_po:
   421|         0|            0|            0|  0.00%|            raise ValueError(f"Minimum PO and maximum PO should be non negative and minimum should be <= than maximum ('{min_po}' and '{max_po}' given instead).")
   422|         0|            0|            0|  0.00%|
   423|         7|            0|            0|  0.00%|        self.parameters.po = (min_po, max_po)
   424|         0|            0|            0|  0.00%|
   425|         0|            0|            0|  0.00%|
   426|         1|            0|            0|  0.00%|    def get_name(self):
   427|         0|            0|            0|  0.00%|        return self.name
   428|         0|            0|            0|  0.00%|
   429|         8|            0|            0|  0.00%|    def set_name(self, name):
   430|         7|            0|            0|  0.00%|        if name == '':
   431|         0|            0|            0|  0.00%|            name = 'Unnamed spell'
   432|         0|            0|            0|  0.00%|
   433|         7|            0|            0|  0.00%|        self.name = str(name)
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|        88|            0|            0|  0.00%|    def get_short_name(self):
   437|        87|            0|            0|  0.00%|        return self.short_name
   438|         0|            0|            0|  0.00%|
   439|         1|            0|            0|  0.00%|    def get_safe_name(self):
   440|         0|            0|            0|  0.00%|        return re.sub(r'\W', '_', self.short_name)
   441|         0|            0|            0|  0.00%|
   442|         8|            0|            0|  0.00%|    def set_short_name(self, short_name):
   443|         7|            0|            0|  0.00%|        if short_name == '':
   444|         0|            0|            0|  0.00%|            short_name = str(uuid1())
   445|         0|            0|            0|  0.00%|
   446|         7|            0|            0|  0.00%|        self.short_name = str(short_name)
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         8|            0|            0|  0.00%|    @classmethod
   451|         1|            0|            0|  0.00%|    def check_json_validity(cls, json_data):
   452|        77|            0|            0|  0.00%|        for field in ('base_damages', 'pa', 'crit_chance', 'uses_per_target', 'uses_per_turn', 'is_weapon', 'name', 'short_name', 'po', 'buffs'):
   453|        70|            0|            0|  0.00%|            if not field in json_data:
   454|         0|            0|            0|  0.00%|                raise KeyError(f"JSON string does not contain a '{field}' field (Spell.check_json_validity).")
   455|         0|            0|            0|  0.00%|
   456|        42|            0|            0|  0.00%|        for characteristic in Characteristics:
(call)|         7|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|        42|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   457|        35|            0|            0|  0.00%|            if not characteristic in json_data['base_damages']:
   458|         0|            0|            0|  0.00%|                raise KeyError(f"JSON string 'base_damages' array does not contains '{characteristic}'.")
   459|         0|            0|            0|  0.00%|
   460|         8|            0|            0|  0.00%|    @classmethod
   461|         1|            0|            0|  0.00%|    def from_json_string(cls, json_string):
   462|         7|            0|            0|  0.00%|        json_data = json.loads(json_string)
(call)|         7|   0.00099659|   0.00014237|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\json\__init__.py:299 loads
   463|         7|            0|            0|  0.00%|        Spell.check_json_validity(json_data)
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:450 check_json_validity
   464|         0|            0|            0|  0.00%|
   465|         7|            0|            0|  0.00%|        spell = Spell(from_scratch=False)
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:176 __init__
   466|        42|            0|            0|  0.00%|        for characteristic in Characteristics:
(call)|         7|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:434 __iter__
(call)|        42|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:438 <genexpr>
   467|        35|    0.0019567|  5.59058e-05|  0.00%|            spell.set_base_damages(characteristic, json_data['base_damages'][characteristic])
(call)|        35|   0.00102901|  2.94004e-05|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:344 set_base_damages
   468|         7|            0|            0|  0.00%|        spell.set_pa(json_data['pa'])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:329 set_pa
   469|         7|            0|            0|  0.00%|        spell.set_crit_chance(json_data['crit_chance'])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:363 set_crit_chance
   470|         7|            0|            0|  0.00%|        spell.set_uses_per_target(json_data['uses_per_target'])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:376 set_uses_per_target
   471|         7|            0|            0|  0.00%|        spell.set_uses_per_turn(json_data['uses_per_turn'])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:388 set_uses_per_turn
   472|         7|            0|            0|  0.00%|        spell.set_weapon(json_data['is_weapon'])
(call)|         7|  0.000966787|  0.000138112|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:397 set_weapon
   473|         7|            0|            0|  0.00%|        spell.set_name(json_data['name'])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:429 set_name
   474|         7|            0|            0|  0.00%|        spell.set_short_name(json_data['short_name'])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:442 set_short_name
   475|         7|            0|            0|  0.00%|        spell.set_po(min_po=json_data['po'][0], max_po=json_data['po'][1])
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:410 set_po
   476|         7|            0|            0|  0.00%|        for buff in json_data['buffs']:
   477|         0|            0|            0|  0.00%|            spell.add_buff(SpellBuff.from_dict(buff))
   478|         0|            0|            0|  0.00%|
   479|         7|            0|            0|  0.00%|        return spell
   480|         0|            0|            0|  0.00%|
   481|         8|            0|            0|  0.00%|    @classmethod
   482|         1|            0|            0|  0.00%|    def from_file(cls, filepath):
   483|         7|    0.0019927|  0.000284672|  0.00%|        if not (os.path.isfile(filepath) and os.access(filepath, os.R_OK)):
(call)|         7|   0.00200009|  0.000285728|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\genericpath.py:27 isfile
   484|         0|            0|            0|  0.00%|            raise FileNotFoundError(f"Cannot create spell from file {filepath}: file not found or innaccessible.")
   485|         0|            0|            0|  0.00%|
   486|         7|            0|            0|  0.00%|        with open(filepath, 'r', encoding='utf-8') as fi:
(call)|         7|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\codecs.py:309 __init__
   487|         7|   0.00103235|  0.000147479|  0.00%|            json_string = fi.read()
(call)|         7|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\codecs.py:319 decode
   488|         0|            0|            0|  0.00%|
   489|         7|            0|            0|  0.00%|        return Spell.from_json_string(json_string)
(call)|         7|   0.00494909|  0.000707013|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:460 from_json_string
File: spell_chain.py
File duration: 20.2314s (10.77%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|        11|            0|            0|  0.00%|from dataclasses import dataclass, field
(call)|         1|    0.0249016|    0.0249016|  0.01%|# <frozen importlib._bootstrap>:1002 _find_and_load
     2|     19131|    0.0608442|   3.1804e-06|  0.03%|from math import perm
     3|     19128|     0.130655|  6.83058e-06|  0.07%|from typing import Dict, List, Set, Tuple
(call)|     19127|    0.0736654|  3.85138e-06|  0.04%|# spell_chain.py:13 <lambda>
     4|     19128|     0.046885|  2.45112e-06|  0.02%|
     5|     19128|     0.121336|  6.34335e-06|  0.06%|from damage_parameters import DamageParameters
(call)|         1|    0.0369337|    0.0369337|  0.02%|# <frozen importlib._bootstrap>:1002 _find_and_load
(call)|     19127|     0.100687|  5.26414e-06|  0.05%|# spell_chain.py:15 <lambda>
     6|     19129|    0.0589194|  3.08011e-06|  0.03%|from spell import Spell
(call)|         1|    0.0279634|    0.0279634|  0.01%|# <frozen importlib._bootstrap>:1002 _find_and_load
     7|     19128|     0.138085|  7.21898e-06|  0.07%|from spell_set import SpellSet
(call)|         1|   0.00199127|   0.00199127|  0.00%|# <frozen importlib._bootstrap>:1002 _find_and_load
(call)|     19127|      5.99653|  0.000313511|  3.19%|# spell_chain.py:17 <lambda>
     8|     19128|     0.144577|  7.55837e-06|  0.08%|from stats import Stats
(call)|     19127|      1.54388|  8.07175e-05|  0.82%|# spell_chain.py:18 <lambda>
     9|     19127|     0.149933|  7.83879e-06|  0.08%|
(call)|     19127|    0.0769634|  4.02381e-06|  0.04%|# spell_chain.py:19 <lambda>
    10|         1|            0|            0|  0.00%|
    11|         3|            0|            0|  0.00%|@dataclass
    12|         1|            0|            0|  0.00%|class ComputationData:
(call)|         1|  0.000994921|  0.000994921|  0.00%|# spell_chain.py:11 ComputationData
(call)|         5|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:281 __set_name__
(call)|         1|   0.00598645|   0.00598645|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:998 dataclass
    13|     38255|    0.0736654|  1.92564e-06|  0.04%|    permutation: Tuple[str] = field(default_factory=lambda: tuple())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    14|         1|            0|            0|  0.00%|    already_computed_count: int = 0
    15|     38255|     0.100687|    2.632e-06|  0.05%|    damages: Dict[str, int] = field(default_factory=lambda: {'min': 0, 'max': 0, 'crit_min': 0, 'crit_max': 0})
(call)|         1|  0.000994921|  0.000994921|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    16|         1|            0|            0|  0.00%|    average_damages: float = 0.0
    17|     38255|     0.145753|  3.81004e-06|  0.08%|    stats: Dict[str, Stats] = field(default_factory=lambda: {'__all__': Stats()})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
(call)|     19127|      5.85077|  0.000305891|  3.11%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
    18|     38255|     0.188656|  4.93154e-06|  0.10%|    parameters: Dict[str, DamageParameters] = field(default_factory=lambda: {'__all__': DamageParameters()})
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
(call)|     19127|      1.35523|  7.08542e-05|  0.72%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:2 __init__
    19|     38255|    0.0769634|  2.01185e-06|  0.04%|    states: Set[str] = field(default_factory=lambda: set())
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\dataclasses.py:322 field
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         3|            0|            0|  0.00%|class SpellChains:
(call)|         1|            0|            0|  0.00%|# spell_chain.py:22 SpellChains
    23|         2|            0|            0|  0.00%|    def __init__(self) -> None:
    24|         1|            0|            0|  0.00%|        self.spells: List[Spell] = list()
    25|         1|            0|            0|  0.00%|        self.indexes: Dict[str, int] = dict()
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|        30|            0|            0|  0.00%|    def add_spell(self, spell: Spell):
    29|        29|  0.000998735|  3.44392e-05|  0.00%|        self.indexes[spell.get_short_name()] = len(self.spells)
(call)|        29|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:436 get_short_name
    30|        29|            0|            0|  0.00%|        self.spells.append(spell)
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         2|            0|            0|  0.00%|    def _get_permutations(self, parameters: DamageParameters) -> List[int]:
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    34|         0|            0|            0|  0.00%|        """Generate a list of list containing the indices of the spells."""
    35|         1|            0|            0|  0.00%|        max_used_pa = parameters.pa
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|        # Associate a unique integer by "spell family" (indentical spell present multiple times)
    38|        41|            0|            0|  0.00%|        spells_short_names_unique_id = {short_name: k for k, short_name in enumerate(set([spell.get_short_name() for spell in self.spells]))}
(call)|        29|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:436 get_short_name
(call)|         1|            0|            0|  0.00%|# spell_chain.py:38 <listcomp>
(call)|         1|            0|            0|  0.00%|# spell_chain.py:38 <dictcomp>
    39|         0|            0|            0|  0.00%|
    40|        32|            0|            0|  0.00%|        spells = [(i, spell.get_pa(), spells_short_names_unique_id[spell.get_short_name()]) for i, spell in enumerate(self.spells)] # Assign a unique index for each spell (so the algorithm works on integers)
(call)|        29|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:326 get_pa
(call)|        29|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell.py:436 get_short_name
(call)|         1|            0|            0|  0.00%|# spell_chain.py:40 <listcomp>
    41|         0|            0|            0|  0.00%|
    42|         1|            0|            0|  0.00%|        all_permutations = {0: [[]]}
    43|        10|            0|            0|  0.00%|        for pa in range(1, max_used_pa + 1):
    44|         9|  0.000999689|  0.000111077|  0.00%|            pa_permutations = []
    45|       270|            0|            0|  0.00%|            for spell_index, spell_pa, _ in spells:
    46|       261|            0|            0|  0.00%|                if pa >= spell_pa:
    47|       239|            0|            0|  0.00%|                    previous_permutations = all_permutations[pa - spell_pa]
    48|    192295|     0.874712|   4.5488e-06|  0.47%|                    pa_permutations.extend(permutation + [spell_index] for permutation in previous_permutations if spell_index not in permutation)
(call)|     85434|     0.472782|  5.53389e-06|  0.25%|# spell_chain.py:48 <genexpr>
    49|         0|            0|            0|  0.00%|
    50|         9|            0|            0|  0.00%|            all_permutations[pa] = []
    51|         9|            0|            0|  0.00%|            permutations_already_seen = set()
    52|         0|            0|            0|  0.00%|            # Remove "identical" permutation : permutation where the same spell is present at the same index but it is not the same instance
    53|     85204|     0.308064|  3.61561e-06|  0.16%|            for permutation in pa_permutations:
    54|   1200447|      5.75914|   4.7975e-06|  3.06%|                unique_permutation_tuple = tuple(spells[spell_index][2] for spell_index in permutation)
(call)|    557626|       2.5703|  4.60936e-06|  1.37%|# spell_chain.py:54 <genexpr>
    55|     85195|     0.302634|  3.55225e-06|  0.16%|                if not unique_permutation_tuple in permutations_already_seen:
    56|     19120|    0.0679388|  3.55328e-06|  0.04%|                    permutations_already_seen.add(unique_permutation_tuple)
    57|     19120|    0.0612767|  3.20485e-06|  0.03%|                    all_permutations[pa].append(permutation)
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|            # all_permutations[pa] = pa_permutations
    60|         0|            0|            0|  0.00%|
    61|         1|            0|            0|  0.00%|        all_permutations_list = list()
    62|        11|            0|            0|  0.00%|        for pa in all_permutations:
    63|        10|  0.000995159|  9.95159e-05|  0.00%|            all_permutations_list.extend(all_permutations[pa])
    64|         0|            0|            0|  0.00%|
    65|         1|            0|            0|  0.00%|        return all_permutations_list
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|     19121|    0.0959225|   5.0166e-06|  0.05%|    def _get_detailed_damages_of_permutation(self, permutation: List[int], stats: Stats, parameters: DamageParameters, previous_data: ComputationData = None) -> ComputationData: #Tuple[Dict[str, int], float]:
(call)|         1|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
    69|    162581|     0.507606|  3.12217e-06|  0.27%|        spells = [self.spells[index] for index in permutation] # Convert the list of indices into a list of spells
(call)|     19120|     0.324927|  1.69941e-05|  0.17%|# spell_chain.py:69 <listcomp>
    70|         0|            0|            0|  0.00%|
    71|     19120|    0.0861783|  4.50723e-06|  0.05%|        if previous_data is None:
    72|         7|            0|            0|  0.00%|            previous_data = ComputationData()
(call)|         7|   0.00198269|  0.000283241|  0.00%|# spell_chain.py:2 __init__
    73|         7|            0|            0|  0.00%|            previous_data.states = set(parameters.starting_states)
    74|         0|            0|            0|  0.00%|
    75|     19120|    0.0868504|  4.54239e-06|  0.05%|        damages: Dict[str, int] = previous_data.damages.copy()
    76|     19120|    0.0809586|  4.23424e-06|  0.04%|        average_damages = previous_data.average_damages
    77|     76480|     0.313453|   4.0985e-06|  0.17%|        stats_buff: Dict[str, Stats] = {name: stats for name, stats in previous_data.stats.items()}
(call)|     19120|     0.142551|  7.45561e-06|  0.08%|# spell_chain.py:77 <dictcomp>
    78|     76480|     0.320726|  4.19359e-06|  0.17%|        parameters_buff: Dict[str, DamageParameters] = {name: parameters for name, parameters in previous_data.parameters.items()}
(call)|     19120|     0.144029|   7.5329e-06|  0.08%|# spell_chain.py:78 <dictcomp>
    79|     19120|     0.082793|  4.33018e-06|  0.04%|        current_states: Set[str] = set(previous_data.states)
    80|         0|            0|            0|  0.00%|
    81|     38240|     0.189319|  4.95082e-06|  0.10%|        for index, spell in enumerate(spells[previous_data.already_computed_count:], start=previous_data.already_computed_count):
    82|     19120|     0.422927|  2.21196e-05|  0.23%|            spell_stats = stats + stats_buff['__all__'] + stats_buff.get(spell.short_name, Stats())
(call)|     38240|      23.9604|  0.000626581| 12.75%|# G:\Autres\DofusDamageCalculator\stats.py:92 __add__
(call)|     19120|      5.79416|  0.000303042|  3.08%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
    83|     19120|       0.4473|  2.33943e-05|  0.24%|            spell_parameters = parameters + parameters_buff['__all__'] + parameters_buff.get(spell.short_name, DamageParameters())
(call)|     38240|      6.11457|    0.0001599|  3.25%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:54 __add__
(call)|     19120|      1.36305|  7.12893e-05|  0.73%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:2 __init__
    84|     19120|     0.246021|  1.28672e-05|  0.13%|            spell_output = spell.get_damages_and_buffs_with_states(spell_stats, spell_parameters, current_states)
(call)|     19120|      100.882|   0.00527624| 53.69%|# G:\Autres\DofusDamageCalculator\spell.py:226 get_damages_and_buffs_with_states
    85|         0|            0|            0|  0.00%|
    86|     19120|    0.0668285|  3.49521e-06|  0.04%|            final_crit_chance = spell.parameters.crit_chance + spell_stats.bonus_crit_chance
    87|     19120|    0.0607862|   3.1792e-06|  0.03%|            if final_crit_chance > 1.0:
    88|         0|            0|            0|  0.00%|                final_crit_chance = 1.0
    89|         0|            0|            0|  0.00%|
    90|     19120|    0.0699487|   3.6584e-06|  0.04%|            current_states = spell_output.states
    91|         0|            0|            0|  0.00%|
    92|     38240|     0.145295|  3.79956e-06|  0.08%|            for name in spell_output.stats:
    93|     19120|     0.310327|  1.62305e-05|  0.17%|                stats_buff[name] = stats_buff.get(name, Stats()) + spell_output.stats[name]
(call)|     19120|       5.8875|  0.000307924|  3.13%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
(call)|     19120|      11.9062|  0.000622709|  6.34%|# G:\Autres\DofusDamageCalculator\stats.py:92 __add__
    94|         0|            0|            0|  0.00%|
    95|     38240|     0.140447|  3.67279e-06|  0.07%|            for name in spell_output.parameters:
    96|     19120|      0.33913|  1.77369e-05|  0.18%|                parameters_buff[name] = parameters_buff.get(name, DamageParameters()) + spell_output.parameters[name]
(call)|     19120|      1.39225|  7.28162e-05|  0.74%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:2 __init__
(call)|     19120|      3.05623|  0.000159844|  1.63%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:54 __add__
    97|         0|            0|            0|  0.00%|
    98|     95600|     0.316476|  3.31042e-06|  0.17%|            for field in damages:
    99|     76480|     0.258491|  3.37985e-06|  0.14%|                damages[field] += spell_output.damages[field]
   100|         0|            0|            0|  0.00%|
   101|     19120|    0.0797005|  4.16843e-06|  0.04%|            average_damages += (1 - final_crit_chance) * spell_output.average_damage + final_crit_chance * spell_output.average_damage_crit
   102|         0|            0|            0|  0.00%|
   103|     19120|      0.24153|  1.26323e-05|  0.13%|        computation_data = ComputationData()
(call)|     19120|      8.64098|  0.000451934|  4.60%|# spell_chain.py:2 __init__
   104|    267802|      1.17766|  4.39749e-06|  0.63%|        computation_data.permutation = tuple(self.spells[index].short_name for index in permutation)
(call)|    124341|     0.528287|  4.24869e-06|  0.28%|# spell_chain.py:104 <genexpr>
   105|     19120|    0.0697513|  3.64808e-06|  0.04%|        computation_data.already_computed_count = len(permutation)
   106|     19120|    0.0628817|  3.28879e-06|  0.03%|        computation_data.average_damages = average_damages
   107|     19120|     0.057214|  2.99237e-06|  0.03%|        computation_data.damages = damages
   108|     19120|    0.0719509|  3.76312e-06|  0.04%|        computation_data.stats = stats_buff
   109|     19120|    0.0548286|  2.86761e-06|  0.03%|        computation_data.parameters = parameters_buff
   110|     19120|    0.0627623|  3.28255e-06|  0.03%|        computation_data.states = current_states
   111|         0|            0|            0|  0.00%|
   112|     19120|     0.058217|  3.04482e-06|  0.03%|        return computation_data
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         2|            0|            0|  0.00%|    def get_detailed_damages(self, stats: Stats, parameters: DamageParameters) -> Dict[Tuple[str], Dict[str, int]]:
(call)|         3|            0|            0|  0.00%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\typing.py:271 inner
   116|         1|   0.00207806|   0.00207806|  0.00%|        permutations = self._get_permutations(parameters)
(call)|         1|      7.37576|      7.37576|  3.93%|# spell_chain.py:33 _get_permutations
   117|         1|            0|            0|  0.00%|        previous_computation_data: Dict[int, ComputationData] = {}
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|        # If the same spell can be used multiple times, there may be multiple "identical" permutations as they do not have the same index
   120|         0|            0|            0|  0.00%|        # Example, if self.spells = ["s1", "s2", "s2"] (and there are enough AP), the permutations will have both [0, 1, 2] and [0, 2, 1] which are really the same
   121|         0|            0|            0|  0.00%|        # So we remove them based on the spells short names
   122|         1|            0|            0|  0.00%|        unique_permutations = set()
   123|     19122|    0.0727856|  3.80638e-06|  0.04%|        for permutation in permutations:
   124|    267805|      1.20729|  4.50809e-06|  0.64%|            unique_permutations.add(tuple(self.spells[index].short_name for index in permutation))
(call)|    124342|     0.555132|  4.46456e-06|  0.30%|# spell_chain.py:124 <genexpr>
   125|     19121|    0.0509996|  2.66721e-06|  0.03%|            if not len(permutation) in previous_computation_data:
   126|        10|            0|            0|  0.00%|                previous_computation_data[len(permutation)] = None
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|        # The permutations is then once again transformed into indices
   129|    267808|      1.12341|  4.19482e-06|  0.60%|        unique_permutations = [tuple(self.indexes[short_name] for short_name in permutation) for permutation in sorted(unique_permutations)]
(call)|    124342|     0.498754|  4.01114e-06|  0.27%|# spell_chain.py:129 <genexpr>
(call)|         1|      1.10845|      1.10845|  0.59%|# spell_chain.py:129 <listcomp>
   130|         0|            0|            0|  0.00%|
   131|         1|            0|            0|  0.00%|        damages = dict()
   132|     19122|    0.0809362|  4.23262e-06|  0.04%|        for index, permutation in enumerate(unique_permutations):
   133|     19121|    0.0797091|  4.16867e-06|  0.04%|            permutation_length = len(permutation)
   134|     19121|    0.0659459|  3.44887e-06|  0.04%|            if permutation_length == 0:
   135|         1|            0|            0|  0.00%|                continue
   136|         0|            0|            0|  0.00%|
   137|     19120|    0.0607426|  3.17692e-06|  0.03%|            previous_data = previous_computation_data[permutation_length - 1] if permutation_length > 1 else None
   138|         0|            0|            0|  0.00%|
   139|     19120|     0.284992|  1.49055e-05|  0.15%|            computation_data = self._get_detailed_damages_of_permutation(permutation, stats, parameters, previous_data=previous_data)
(call)|     19120|      175.523|   0.00918009| 93.41%|# spell_chain.py:68 _get_detailed_damages_of_permutation
   140|     19120|    0.0876663|  4.58506e-06|  0.05%|            damages[index] = (computation_data.average_damages, computation_data.damages.copy())
   141|     19120|     0.093375|  4.88363e-06|  0.05%|            previous_computation_data[len(permutation)] = computation_data
   142|         0|            0|            0|  0.00%|
   143|    306045|      1.68252|  5.49761e-06|  0.90%|        damages = {tuple(self.spells[index].short_name for index in unique_permutations[key]): value for key, value in sorted(damages.items(), key=lambda key_value: key_value[1][0], reverse=True)}
(call)|     19120|    0.0907431|  4.74598e-06|  0.05%|# spell_chain.py:143 <lambda>
(call)|    124341|     0.664211|  5.34185e-06|  0.35%|# spell_chain.py:143 <genexpr>
(call)|         1|      1.45712|      1.45712|  0.78%|# spell_chain.py:143 <dictcomp>
   144|         0|            0|            0|  0.00%|
   145|         1|            0|            0|  0.00%|        return damages
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|
   148|         1|            0|            0|  0.00%|if __name__ == '__main__':
   149|         1|            0|            0|  0.00%|    filenames = ['spells\\1pa.json', 'spells\\1pa_.json', 'spells\\2pa.json', 'spells\\2pa__.json', 'spells\\2pa_.json', 'spells\\2pa___.json', 'spells\\3pa.json']
   150|        10|            0|            0|  0.00%|    spells = [Spell.from_file(filename) for filename in filenames]
(call)|         7|   0.00997424|   0.00142489|  0.01%|# G:\Autres\DofusDamageCalculator\spell.py:481 from_file
(call)|         1|   0.00997424|   0.00997424|  0.01%|# spell_chain.py:150 <listcomp>
   151|         0|            0|            0|  0.00%|
   152|         1|            0|            0|  0.00%|    spell_set = SpellSet()
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell_set.py:11 __init__
   153|         8|            0|            0|  0.00%|    for spell in spells:
   154|         7|            0|            0|  0.00%|        spell_set.add_spell(spell)
(call)|         7|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\spell_set.py:16 add_spell
   155|         0|            0|            0|  0.00%|
   156|         1|            0|            0|  0.00%|    stats = Stats()
(call)|         1|            0|            0|  0.00%|# G:\Autres\DofusDamageCalculator\stats.py:34 __init__
   157|         1|            0|            0|  0.00%|    parameters = DamageParameters.from_string('-pa 9')
(call)|         1|   0.00698066|   0.00698066|  0.00%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:111 from_string
   158|         1|            0|            0|  0.00%|    spell_list = spell_set.get_spell_list_single_target(parameters)
(call)|         1|  0.000995636|  0.000995636|  0.00%|# G:\Autres\DofusDamageCalculator\spell_set.py:28 get_spell_list_single_target
   159|         0|            0|            0|  0.00%|
   160|         1|            0|            0|  0.00%|    spell_chain = SpellChains()
(call)|         1|            0|            0|  0.00%|# spell_chain.py:23 __init__
   161|        30|            0|            0|  0.00%|    for spell in spell_list:
   162|        29|            0|            0|  0.00%|        spell_chain.add_spell(spell)
(call)|        29|  0.000998735|  3.44392e-05|  0.00%|# spell_chain.py:28 add_spell
   163|         0|            0|            0|  0.00%|
   164|         1|  0.000988722|  0.000988722|  0.00%|    dmg = spell_chain.get_detailed_damages(stats, parameters)
(call)|         1|      187.792|      187.792| 99.94%|# spell_chain.py:115 get_detailed_damages
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|    # for k, c in enumerate(dmg):
   167|         0|            0|            0|  0.00%|    #     print(c, dmg[c])
   168|         0|            0|            0|  0.00%|    #     if k > 5:
   169|         0|            0|            0|  0.00%|    #         break
File: G:\Autres\DofusDamageCalculator\damages.py
File duration: 12.8911s (6.86%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|            0|            0|  0.00%|from damage_parameters import DamageParameters
     2|         1|            0|            0|  0.00%|from stats import Characteristics, Damages, Stats
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|    382401|     0.942513|  2.46473e-06|  0.50%|def compute_damage(base_damages, stats: Stats, characteristic: Characteristics, parameters: DamageParameters, is_weapon, is_crit=False):
     6|    382400|      2.89782|  7.57799e-06|  1.54%|    base_damages = base_damages + parameters.get_base_damage(characteristic)
(call)|    382400|      15.6134|  4.08299e-05|  8.31%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:36 get_base_damage
     7|         0|            0|            0|  0.00%|
     8|    382400|      1.11885|  2.92585e-06|  0.60%|    if base_damages <= 0:
     9|    305920|     0.896231|  2.92962e-06|  0.48%|        return 0
    10|         0|            0|            0|  0.00%|
    11|     76480|     0.618312|  8.08462e-06|  0.33%|    power = stats.get_damage(Damages.POWER)
(call)|     76480|     0.527091|  6.89188e-06|  0.28%|# G:\Autres\DofusDamageCalculator\stats.py:140 get_damage
    12|     76480|      0.23657|  3.09323e-06|  0.13%|    if is_weapon:
    13|         0|            0|            0|  0.00%|        power += stats.get_damage(Damages.WEAPON_POWER)
    14|         0|            0|            0|  0.00%|
    15|     76480|     0.593558|  7.76096e-06|  0.32%|    characteristic_multiplier = 1 + (stats.get_characteristic(characteristic) + power) / 100
(call)|     76480|       0.4694|  6.13756e-06|  0.25%|# G:\Autres\DofusDamageCalculator\stats.py:118 get_characteristic
    16|         0|            0|            0|  0.00%|
    17|     76480|      1.61098|  2.10641e-05|  0.86%|    flat_damages = stats.get_damage(Damages.BASIC) + stats.get_damage(Damages(characteristic.value))
(call)|    152960|     0.960463|  6.27918e-06|  0.51%|# G:\Autres\DofusDamageCalculator\stats.py:140 get_damage
(call)|     76480|        1.263|  1.65142e-05|  0.67%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\types.py:171 __get__
(call)|     76480|      1.77196|   2.3169e-05|  0.94%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:358 __call__
    18|     76480|     0.241414|  3.15656e-06|  0.13%|    if is_crit:
    19|     38240|     0.270509|  7.07397e-06|  0.14%|        flat_damages += stats.get_damage(Damages.CRIT)
(call)|     38240|     0.246964|  6.45825e-06|  0.13%|# G:\Autres\DofusDamageCalculator\stats.py:140 get_damage
    20|         0|            0|            0|  0.00%|
    21|     76480|     0.559135|  7.31087e-06|  0.30%|    final_multiplier = 1.0 + stats.get_damage(Damages.FINAL) / 100
(call)|     76480|     0.491405|  6.42527e-06|  0.26%|# G:\Autres\DofusDamageCalculator\stats.py:140 get_damage
    22|     76480|     0.243735|  3.18691e-06|  0.13%|    if is_weapon:
    23|         0|            0|            0|  0.00%|        final_multiplier += stats.get_damage(Damages.WEAPON) / 100
    24|         0|            0|            0|  0.00%|    else:
    25|     76480|     0.613508|  8.02181e-06|  0.33%|        final_multiplier += stats.get_damage(Damages.SPELL) / 100
(call)|     76480|     0.497333|  6.50278e-06|  0.26%|# G:\Autres\DofusDamageCalculator\stats.py:140 get_damage
    26|         0|            0|            0|  0.00%|
    27|     76480|      0.22363|  2.92403e-06|  0.12%|    if parameters.distance == 'range':
    28|     76480|     0.594167|  7.76893e-06|  0.32%|        final_multiplier += stats.get_damage(Damages.RANGE) / 100
(call)|     76480|     0.493947|  6.45851e-06|  0.26%|# G:\Autres\DofusDamageCalculator\stats.py:140 get_damage
    29|         0|            0|            0|  0.00%|    elif parameters.distance == 'melee':
    30|         0|            0|            0|  0.00%|        final_multiplier += stats.get_damage(Damages.MELEE) / 100
    31|         0|            0|            0|  0.00%|
    32|     76480|     0.687694|  8.99181e-06|  0.37%|    resistance_multiplier = max(0, 1.0 - parameters.get_resistances_dict()[characteristic] / 100) # Can't be negative damages
(call)|     76480|      12.2382|  0.000160019|  6.51%|# G:\Autres\DofusDamageCalculator\damage_parameters.py:28 get_resistances_dict
    33|         0|            0|            0|  0.00%|
    34|     76480|      0.26798|  3.50392e-06|  0.14%|    vulnerability_multiplier = max(0, 1.0 + parameters.vulnerability / 100) # Can't be negative damages
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|    # Game rounds down the damage between each steps
    37|     76480|     0.274455|  3.58858e-06|  0.15%|    return int(int(int(int(base_damages * characteristic_multiplier + flat_damages) * final_multiplier) * vulnerability_multiplier) * resistance_multiplier)
File: C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\types.py
File duration: 9.41256s (5.01%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""
     2|         0|            0|            0|  0.00%|Define names for built-in types that aren't directly accessible as a builtin.
     3|         0|            0|            0|  0.00%|"""
     4|         0|            0|            0|  0.00%|import sys
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|# Iterators in Python aren't a matter of type but of protocol.  A large
     7|         0|            0|            0|  0.00%|# and changing number of builtin types implement *some* flavor of
     8|         0|            0|            0|  0.00%|# iterator.  Don't check the type!  Use hasattr to check for both
     9|         0|            0|            0|  0.00%|# "__iter__" and "__next__" attributes instead.
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|def _f(): pass
    12|         0|            0|            0|  0.00%|FunctionType = type(_f)
    13|         0|            0|            0|  0.00%|LambdaType = type(lambda: None)         # Same as FunctionType
    14|         0|            0|            0|  0.00%|CodeType = type(_f.__code__)
    15|         0|            0|            0|  0.00%|MappingProxyType = type(type.__dict__)
    16|         0|            0|            0|  0.00%|SimpleNamespace = type(sys.implementation)
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|def _cell_factory():
    19|         0|            0|            0|  0.00%|    a = 1
    20|         0|            0|            0|  0.00%|    def f():
    21|         0|            0|            0|  0.00%|        nonlocal a
    22|         0|            0|            0|  0.00%|    return f.__closure__[0]
    23|         0|            0|            0|  0.00%|CellType = type(_cell_factory())
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|def _g():
    26|         0|            0|            0|  0.00%|    yield 1
    27|         0|            0|            0|  0.00%|GeneratorType = type(_g())
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|async def _c(): pass
    30|         0|            0|            0|  0.00%|_c = _c()
    31|         0|            0|            0|  0.00%|CoroutineType = type(_c)
    32|         0|            0|            0|  0.00%|_c.close()  # Prevent ResourceWarning
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|async def _ag():
    35|         0|            0|            0|  0.00%|    yield
    36|         0|            0|            0|  0.00%|_ag = _ag()
    37|         0|            0|            0|  0.00%|AsyncGeneratorType = type(_ag)
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|class _C:
    40|         0|            0|            0|  0.00%|    def _m(self): pass
    41|         0|            0|            0|  0.00%|MethodType = type(_C()._m)
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|BuiltinFunctionType = type(len)
    44|         0|            0|            0|  0.00%|BuiltinMethodType = type([].append)     # Same as BuiltinFunctionType
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|WrapperDescriptorType = type(object.__init__)
    47|         0|            0|            0|  0.00%|MethodWrapperType = type(object().__str__)
    48|         0|            0|            0|  0.00%|MethodDescriptorType = type(str.join)
    49|         0|            0|            0|  0.00%|ClassMethodDescriptorType = type(dict.__dict__['fromkeys'])
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|ModuleType = type(sys)
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|try:
    54|         0|            0|            0|  0.00%|    raise TypeError
    55|         0|            0|            0|  0.00%|except TypeError:
    56|         0|            0|            0|  0.00%|    tb = sys.exc_info()[2]
    57|         0|            0|            0|  0.00%|    TracebackType = type(tb)
    58|         0|            0|            0|  0.00%|    FrameType = type(tb.tb_frame)
    59|         0|            0|            0|  0.00%|    tb = None; del tb
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|# For Jython, the following two types are identical
    62|         0|            0|            0|  0.00%|GetSetDescriptorType = type(FunctionType.__code__)
    63|         0|            0|            0|  0.00%|MemberDescriptorType = type(FunctionType.__globals__)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|del sys, _f, _g, _C, _c, _ag  # Not for export
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|# Provide a PEP 3115 compliant mechanism for class creation
    69|         0|            0|            0|  0.00%|def new_class(name, bases=(), kwds=None, exec_body=None):
    70|         0|            0|            0|  0.00%|    """Create a class object dynamically using the appropriate metaclass."""
    71|         0|            0|            0|  0.00%|    resolved_bases = resolve_bases(bases)
    72|         0|            0|            0|  0.00%|    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)
    73|         0|            0|            0|  0.00%|    if exec_body is not None:
    74|         0|            0|            0|  0.00%|        exec_body(ns)
    75|         0|            0|            0|  0.00%|    if resolved_bases is not bases:
    76|         0|            0|            0|  0.00%|        ns['__orig_bases__'] = bases
    77|         0|            0|            0|  0.00%|    return meta(name, resolved_bases, ns, **kwds)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|def resolve_bases(bases):
    80|         0|            0|            0|  0.00%|    """Resolve MRO entries dynamically as specified by PEP 560."""
    81|         0|            0|            0|  0.00%|    new_bases = list(bases)
    82|         0|            0|            0|  0.00%|    updated = False
    83|         0|            0|            0|  0.00%|    shift = 0
    84|         0|            0|            0|  0.00%|    for i, base in enumerate(bases):
    85|         0|            0|            0|  0.00%|        if isinstance(base, type) and not isinstance(base, GenericAlias):
    86|         0|            0|            0|  0.00%|            continue
    87|         0|            0|            0|  0.00%|        if not hasattr(base, "__mro_entries__"):
    88|         0|            0|            0|  0.00%|            continue
    89|         0|            0|            0|  0.00%|        new_base = base.__mro_entries__(bases)
    90|         0|            0|            0|  0.00%|        updated = True
    91|         0|            0|            0|  0.00%|        if not isinstance(new_base, tuple):
    92|         0|            0|            0|  0.00%|            raise TypeError("__mro_entries__ must return a tuple")
    93|         0|            0|            0|  0.00%|        else:
    94|         0|            0|            0|  0.00%|            new_bases[i+shift:i+shift+1] = new_base
    95|         0|            0|            0|  0.00%|            shift += len(new_base) - 1
    96|         0|            0|            0|  0.00%|    if not updated:
    97|         0|            0|            0|  0.00%|        return bases
    98|         0|            0|            0|  0.00%|    return tuple(new_bases)
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|def prepare_class(name, bases=(), kwds=None):
   101|         0|            0|            0|  0.00%|    """Call the __prepare__ method of the appropriate metaclass.
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|    Returns (metaclass, namespace, kwds) as a 3-tuple
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|    *metaclass* is the appropriate metaclass
   106|         0|            0|            0|  0.00%|    *namespace* is the prepared class namespace
   107|         0|            0|            0|  0.00%|    *kwds* is an updated copy of the passed in kwds argument with any
   108|         0|            0|            0|  0.00%|    'metaclass' entry removed. If no kwds argument is passed in, this will
   109|         0|            0|            0|  0.00%|    be an empty dict.
   110|         0|            0|            0|  0.00%|    """
   111|         0|            0|            0|  0.00%|    if kwds is None:
   112|         0|            0|            0|  0.00%|        kwds = {}
   113|         0|            0|            0|  0.00%|    else:
   114|         0|            0|            0|  0.00%|        kwds = dict(kwds) # Don't alter the provided mapping
   115|         0|            0|            0|  0.00%|    if 'metaclass' in kwds:
   116|         0|            0|            0|  0.00%|        meta = kwds.pop('metaclass')
   117|         0|            0|            0|  0.00%|    else:
   118|         0|            0|            0|  0.00%|        if bases:
   119|         0|            0|            0|  0.00%|            meta = type(bases[0])
   120|         0|            0|            0|  0.00%|        else:
   121|         0|            0|            0|  0.00%|            meta = type
   122|         0|            0|            0|  0.00%|    if isinstance(meta, type):
   123|         0|            0|            0|  0.00%|        # when meta is a type, we first determine the most-derived metaclass
   124|         0|            0|            0|  0.00%|        # instead of invoking the initial candidate directly
   125|         0|            0|            0|  0.00%|        meta = _calculate_meta(meta, bases)
   126|         0|            0|            0|  0.00%|    if hasattr(meta, '__prepare__'):
   127|         0|            0|            0|  0.00%|        ns = meta.__prepare__(name, bases, **kwds)
   128|         0|            0|            0|  0.00%|    else:
   129|         0|            0|            0|  0.00%|        ns = {}
   130|         0|            0|            0|  0.00%|    return meta, ns, kwds
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|def _calculate_meta(meta, bases):
   133|         0|            0|            0|  0.00%|    """Calculate the most derived metaclass."""
   134|         0|            0|            0|  0.00%|    winner = meta
   135|         0|            0|            0|  0.00%|    for base in bases:
   136|         0|            0|            0|  0.00%|        base_meta = type(base)
   137|         0|            0|            0|  0.00%|        if issubclass(winner, base_meta):
   138|         0|            0|            0|  0.00%|            continue
   139|         0|            0|            0|  0.00%|        if issubclass(base_meta, winner):
   140|         0|            0|            0|  0.00%|            winner = base_meta
   141|         0|            0|            0|  0.00%|            continue
   142|         0|            0|            0|  0.00%|        # else:
   143|         0|            0|            0|  0.00%|        raise TypeError("metaclass conflict: "
   144|         0|            0|            0|  0.00%|                        "the metaclass of a derived class "
   145|         0|            0|            0|  0.00%|                        "must be a (non-strict) subclass "
   146|         0|            0|            0|  0.00%|                        "of the metaclasses of all its bases")
   147|         0|            0|            0|  0.00%|    return winner
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|class DynamicClassAttribute:
   150|         0|            0|            0|  0.00%|    """Route attribute access on a class to __getattr__.
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|    This is a descriptor, used to define attributes that act differently when
   153|         0|            0|            0|  0.00%|    accessed through an instance and through a class.  Instance access remains
   154|         0|            0|            0|  0.00%|    normal, but access to an attribute through a class will be routed to the
   155|         0|            0|            0|  0.00%|    class's __getattr__ method; this is done by raising AttributeError.
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|    This allows one to have properties active on an instance, and have virtual
   158|         0|            0|            0|  0.00%|    attributes on the class with the same name (see Enum for an example).
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|    """
   161|         0|            0|            0|  0.00%|    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
   162|         0|            0|            0|  0.00%|        self.fget = fget
   163|         0|            0|            0|  0.00%|        self.fset = fset
   164|         0|            0|            0|  0.00%|        self.fdel = fdel
   165|         0|            0|            0|  0.00%|        # next two lines make DynamicClassAttribute act the same as property
   166|         0|            0|            0|  0.00%|        self.__doc__ = doc or fget.__doc__
   167|         0|            0|            0|  0.00%|        self.overwrite_doc = doc is None
   168|         0|            0|            0|  0.00%|        # support for abstract methods
   169|         0|            0|            0|  0.00%|        self.__isabstractmethod__ = bool(getattr(fget, '__isabstractmethod__', False))
   170|         0|            0|            0|  0.00%|
   171|    764800|      1.17654|  1.53836e-06|  0.63%|    def __get__(self, instance, ownerclass=None):
   172|    764800|      1.67842|  2.19459e-06|  0.89%|        if instance is None:
   173|         0|            0|            0|  0.00%|            if self.__isabstractmethod__:
   174|         0|            0|            0|  0.00%|                return self
   175|         0|            0|            0|  0.00%|            raise AttributeError()
   176|    764800|      1.72604|  2.25685e-06|  0.92%|        elif self.fget is None:
   177|         0|            0|            0|  0.00%|            raise AttributeError("unreadable attribute")
   178|    764800|      4.83157|  6.31742e-06|  2.57%|        return self.fget(instance)
(call)|    764800|      2.93208|  3.83378e-06|  1.56%|# C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\enum.py:792 value
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|    def __set__(self, instance, value):
   181|         0|            0|            0|  0.00%|        if self.fset is None:
   182|         0|            0|            0|  0.00%|            raise AttributeError("can't set attribute")
   183|         0|            0|            0|  0.00%|        self.fset(instance, value)
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|    def __delete__(self, instance):
   186|         0|            0|            0|  0.00%|        if self.fdel is None:
   187|         0|            0|            0|  0.00%|            raise AttributeError("can't delete attribute")
   188|         0|            0|            0|  0.00%|        self.fdel(instance)
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|    def getter(self, fget):
   191|         0|            0|            0|  0.00%|        fdoc = fget.__doc__ if self.overwrite_doc else None
   192|         0|            0|            0|  0.00%|        result = type(self)(fget, self.fset, self.fdel, fdoc or self.__doc__)
   193|         0|            0|            0|  0.00%|        result.overwrite_doc = self.overwrite_doc
   194|         0|            0|            0|  0.00%|        return result
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|    def setter(self, fset):
   197|         0|            0|            0|  0.00%|        result = type(self)(self.fget, fset, self.fdel, self.__doc__)
   198|         0|            0|            0|  0.00%|        result.overwrite_doc = self.overwrite_doc
   199|         0|            0|            0|  0.00%|        return result
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|    def deleter(self, fdel):
   202|         0|            0|            0|  0.00%|        result = type(self)(self.fget, self.fset, fdel, self.__doc__)
   203|         0|            0|            0|  0.00%|        result.overwrite_doc = self.overwrite_doc
   204|         0|            0|            0|  0.00%|        return result
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|class _GeneratorWrapper:
   208|         0|            0|            0|  0.00%|    # TODO: Implement this in C.
   209|         0|            0|            0|  0.00%|    def __init__(self, gen):
   210|         0|            0|            0|  0.00%|        self.__wrapped = gen
   211|         0|            0|            0|  0.00%|        self.__isgen = gen.__class__ is GeneratorType
   212|         0|            0|            0|  0.00%|        self.__name__ = getattr(gen, '__name__', None)
   213|         0|            0|            0|  0.00%|        self.__qualname__ = getattr(gen, '__qualname__', None)
   214|         0|            0|            0|  0.00%|    def send(self, val):
   215|         0|            0|            0|  0.00%|        return self.__wrapped.send(val)
   216|         0|            0|            0|  0.00%|    def throw(self, tp, *rest):
   217|         0|            0|            0|  0.00%|        return self.__wrapped.throw(tp, *rest)
   218|         0|            0|            0|  0.00%|    def close(self):
   219|         0|            0|            0|  0.00%|        return self.__wrapped.close()
   220|         0|            0|            0|  0.00%|    @property
   221|         0|            0|            0|  0.00%|    def gi_code(self):
   222|         0|            0|            0|  0.00%|        return self.__wrapped.gi_code
   223|         0|            0|            0|  0.00%|    @property
   224|         0|            0|            0|  0.00%|    def gi_frame(self):
   225|         0|            0|            0|  0.00%|        return self.__wrapped.gi_frame
   226|         0|            0|            0|  0.00%|    @property
   227|         0|            0|            0|  0.00%|    def gi_running(self):
   228|         0|            0|            0|  0.00%|        return self.__wrapped.gi_running
   229|         0|            0|            0|  0.00%|    @property
   230|         0|            0|            0|  0.00%|    def gi_yieldfrom(self):
   231|         0|            0|            0|  0.00%|        return self.__wrapped.gi_yieldfrom
   232|         0|            0|            0|  0.00%|    cr_code = gi_code
   233|         0|            0|            0|  0.00%|    cr_frame = gi_frame
   234|         0|            0|            0|  0.00%|    cr_running = gi_running
   235|         0|            0|            0|  0.00%|    cr_await = gi_yieldfrom
   236|         0|            0|            0|  0.00%|    def __next__(self):
   237|         0|            0|            0|  0.00%|        return next(self.__wrapped)
   238|         0|            0|            0|  0.00%|    def __iter__(self):
   239|         0|            0|            0|  0.00%|        if self.__isgen:
   240|         0|            0|            0|  0.00%|            return self.__wrapped
   241|         0|            0|            0|  0.00%|        return self
   242|         0|            0|            0|  0.00%|    __await__ = __iter__
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|def coroutine(func):
   245|         0|            0|            0|  0.00%|    """Convert regular generator function to a coroutine."""
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|    if not callable(func):
   248|         0|            0|            0|  0.00%|        raise TypeError('types.coroutine() expects a callable')
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    if (func.__class__ is FunctionType and
   251|         0|            0|            0|  0.00%|        getattr(func, '__code__', None).__class__ is CodeType):
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|        co_flags = func.__code__.co_flags
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|        # Check if 'func' is a coroutine function.
   256|         0|            0|            0|  0.00%|        # (0x180 == CO_COROUTINE | CO_ITERABLE_COROUTINE)
   257|         0|            0|            0|  0.00%|        if co_flags & 0x180:
   258|         0|            0|            0|  0.00%|            return func
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|        # Check if 'func' is a generator function.
   261|         0|            0|            0|  0.00%|        # (0x20 == CO_GENERATOR)
   262|         0|            0|            0|  0.00%|        if co_flags & 0x20:
   263|         0|            0|            0|  0.00%|            # TODO: Implement this in C.
   264|         0|            0|            0|  0.00%|            co = func.__code__
   265|         0|            0|            0|  0.00%|            # 0x100 == CO_ITERABLE_COROUTINE
   266|         0|            0|            0|  0.00%|            func.__code__ = co.replace(co_flags=co.co_flags | 0x100)
   267|         0|            0|            0|  0.00%|            return func
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|    # The following code is primarily to support functions that
   270|         0|            0|            0|  0.00%|    # return generator-like objects (for instance generators
   271|         0|            0|            0|  0.00%|    # compiled with Cython).
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|    # Delay functools and _collections_abc import for speeding up types import.
   274|         0|            0|            0|  0.00%|    import functools
   275|         0|            0|            0|  0.00%|    import _collections_abc
   276|         0|            0|            0|  0.00%|    @functools.wraps(func)
   277|         0|            0|            0|  0.00%|    def wrapped(*args, **kwargs):
   278|         0|            0|            0|  0.00%|        coro = func(*args, **kwargs)
   279|         0|            0|            0|  0.00%|        if (coro.__class__ is CoroutineType or
   280|         0|            0|            0|  0.00%|            coro.__class__ is GeneratorType and coro.gi_code.co_flags & 0x100):
   281|         0|            0|            0|  0.00%|            # 'coro' is a native coroutine object or an iterable coroutine
   282|         0|            0|            0|  0.00%|            return coro
   283|         0|            0|            0|  0.00%|        if (isinstance(coro, _collections_abc.Generator) and
   284|         0|            0|            0|  0.00%|            not isinstance(coro, _collections_abc.Coroutine)):
   285|         0|            0|            0|  0.00%|            # 'coro' is either a pure Python generator iterator, or it
   286|         0|            0|            0|  0.00%|            # implements collections.abc.Generator (and does not implement
   287|         0|            0|            0|  0.00%|            # collections.abc.Coroutine).
   288|         0|            0|            0|  0.00%|            return _GeneratorWrapper(coro)
   289|         0|            0|            0|  0.00%|        # 'coro' is either an instance of collections.abc.Coroutine or
   290|         0|            0|            0|  0.00%|        # some other object -- pass it through.
   291|         0|            0|            0|  0.00%|        return coro
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    return wrapped
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|GenericAlias = type(list[int])
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|__all__ = [n for n in globals() if n[:1] != '_']
